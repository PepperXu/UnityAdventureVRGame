//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 image_RNM3[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 4 .u32 samples;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightRadius;
.global .align 4 .b8 lightPos[12];
.global .align 4 .b8 lightColor[12];
.global .align 4 .u32 ignoreNormal;
.global .align 4 .u32 lightCubemap;
.global .align 4 .b8 lightMatrix[36];
.global .align 4 .f32 lightFalloffFakeDistanceMult;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightRadiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12ignoreNormalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12lightCubemapE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightMatrixE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo28lightFalloffFakeDistanceMultE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename11lightRadiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8lightPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12ignoreNormalE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12lightCubemapE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename11lightMatrixE[10] = {77, 97, 116, 114, 105, 120, 51, 120, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename28lightFalloffFakeDistanceMultE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightRadiusE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12ignoreNormalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12lightCubemapE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightMatrixE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum28lightFalloffFakeDistanceMultE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightRadiusE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8lightPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12ignoreNormalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12lightCubemapE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightMatrixE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightRadiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12ignoreNormalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12lightCubemapE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightMatrixE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation28lightFalloffFakeDistanceMultE[1];

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<138>;
	.reg .b16 	%rs<221>;
	.reg .f32 	%f<998>;
	.reg .b32 	%r<249>;
	.reg .b64 	%rd<369>;


	mov.u64 	%rd368, __local_depot0;
	cvta.local.u64 	%SP, %rd368;
	ld.global.v2.u32 	{%r26, %r27}, [pixelID];
	cvt.u64.u32	%rd12, %r26;
	cvt.u64.u32	%rd13, %r27;
	mov.u64 	%rd16, uvnormal;
	cvta.global.u64 	%rd11, %rd16;
	mov.u32 	%r24, 2;
	mov.u32 	%r25, 4;
	mov.u64 	%rd15, 0;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r24, %r25, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.u32 	%r1, [%rd10];
	shr.u32 	%r30, %r1, 16;
	cvt.u16.u32	%rs1, %r30;
	and.b16  	%rs12, %rs1, 255;
	cvt.u16.u32	%rs13, %r1;
	or.b16  	%rs14, %rs13, %rs12;
	setp.eq.s16	%p7, %rs14, 0;
	mov.f32 	%f974, 0f00000000;
	mov.f32 	%f975, %f974;
	mov.f32 	%f976, %f974;
	@%p7 bra 	BB0_2;

	ld.u8 	%rs15, [%rd10+1];
	and.b16  	%rs17, %rs13, 255;
	cvt.rn.f32.u16	%f122, %rs17;
	div.rn.f32 	%f123, %f122, 0f437F0000;
	fma.rn.f32 	%f124, %f123, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f125, %rs15;
	div.rn.f32 	%f126, %f125, 0f437F0000;
	fma.rn.f32 	%f127, %f126, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f128, %rs12;
	div.rn.f32 	%f129, %f128, 0f437F0000;
	fma.rn.f32 	%f130, %f129, 0f40000000, 0fBF800000;
	mul.f32 	%f131, %f127, %f127;
	fma.rn.f32 	%f132, %f124, %f124, %f131;
	fma.rn.f32 	%f133, %f130, %f130, %f132;
	sqrt.rn.f32 	%f134, %f133;
	rcp.rn.f32 	%f135, %f134;
	mul.f32 	%f974, %f124, %f135;
	mul.f32 	%f975, %f127, %f135;
	mul.f32 	%f976, %f130, %f135;

BB0_2:
	ld.global.v2.u32 	{%r31, %r32}, [pixelID];
	ld.global.v2.u32 	{%r34, %r35}, [tileInfo];
	add.s32 	%r2, %r31, %r34;
	add.s32 	%r3, %r32, %r35;
	setp.eq.f32	%p8, %f975, 0f00000000;
	setp.eq.f32	%p9, %f974, 0f00000000;
	and.pred  	%p10, %p9, %p8;
	setp.eq.f32	%p11, %f976, 0f00000000;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	BB0_115;
	bra.uni 	BB0_3;

BB0_115:
	ld.global.u32 	%r248, [imageEnabled];
	and.b32  	%r197, %r248, 1;
	setp.eq.b32	%p130, %r197, 1;
	@!%p130 bra 	BB0_117;
	bra.uni 	BB0_116;

BB0_116:
	cvt.u64.u32	%rd256, %r2;
	cvt.u64.u32	%rd257, %r3;
	mov.u64 	%rd260, image;
	cvta.global.u64 	%rd255, %rd260;
	// inline asm
	call (%rd254), _rt_buffer_get_64, (%rd255, %r24, %r25, %rd256, %rd257, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs153, 0;
	st.v4.u8 	[%rd254], {%rs153, %rs153, %rs153, %rs153};
	ld.global.u32 	%r248, [imageEnabled];

BB0_117:
	and.b32  	%r200, %r248, 8;
	setp.eq.s32	%p131, %r200, 0;
	@%p131 bra 	BB0_119;

	cvt.u64.u32	%rd264, %r3;
	cvt.u64.u32	%rd263, %r2;
	mov.u64 	%rd267, image_Mask;
	cvta.global.u64 	%rd262, %rd267;
	// inline asm
	call (%rd261), _rt_buffer_get_64, (%rd262, %r24, %r24, %rd263, %rd264, %rd15, %rd15);
	// inline asm
	mov.f32 	%f872, 0f00000000;
	cvt.rzi.u32.f32	%r203, %f872;
	cvt.u16.u32	%rs154, %r203;
	mov.u16 	%rs155, 0;
	st.v2.u8 	[%rd261], {%rs154, %rs155};
	ld.global.u32 	%r248, [imageEnabled];

BB0_119:
	cvt.u64.u32	%rd8, %r2;
	cvt.u64.u32	%rd9, %r3;
	and.b32  	%r204, %r248, 4;
	setp.eq.s32	%p132, %r204, 0;
	@%p132 bra 	BB0_123;

	ld.global.u32 	%r205, [additive];
	setp.eq.s32	%p133, %r205, 0;
	@%p133 bra 	BB0_122;

	mov.u64 	%rd280, image_HDR;
	cvta.global.u64 	%rd269, %rd280;
	mov.u32 	%r209, 8;
	// inline asm
	call (%rd268), _rt_buffer_get_64, (%rd269, %r24, %r209, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs162, %rs163, %rs164, %rs165}, [%rd268];
	// inline asm
	{  cvt.f32.f16 %f873, %rs162;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f874, %rs163;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f875, %rs164;}

	// inline asm
	// inline asm
	call (%rd274), _rt_buffer_get_64, (%rd269, %r24, %r209, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f876, %f873, 0f00000000;
	add.f32 	%f877, %f874, 0f00000000;
	add.f32 	%f878, %f875, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs161, %f878;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs160, %f877;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs159, %f876;}

	// inline asm
	mov.u16 	%rs166, 0;
	st.v4.u16 	[%rd274], {%rs159, %rs160, %rs161, %rs166};
	bra.uni 	BB0_123;

BB0_3:
	ld.global.v2.u32 	{%r41, %r42}, [pixelID];
	cvt.u64.u32	%rd19, %r41;
	cvt.u64.u32	%rd20, %r42;
	mov.u64 	%rd23, uvpos;
	cvta.global.u64 	%rd18, %rd23;
	mov.u32 	%r40, 12;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd18, %r24, %r40, %rd19, %rd20, %rd15, %rd15);
	// inline asm
	ld.global.f32 	%f138, [lightPos];
	ld.f32 	%f9, [%rd17+8];
	ld.f32 	%f8, [%rd17+4];
	ld.f32 	%f7, [%rd17];
	sub.f32 	%f139, %f138, %f7;
	ld.global.f32 	%f140, [lightPos+4];
	sub.f32 	%f141, %f140, %f8;
	ld.global.f32 	%f142, [lightPos+8];
	sub.f32 	%f143, %f142, %f9;
	mul.f32 	%f144, %f141, %f141;
	fma.rn.f32 	%f145, %f139, %f139, %f144;
	fma.rn.f32 	%f146, %f143, %f143, %f145;
	sqrt.rn.f32 	%f147, %f146;
	rcp.rn.f32 	%f148, %f147;
	mul.f32 	%f10, %f139, %f148;
	mul.f32 	%f11, %f141, %f148;
	mul.f32 	%f12, %f143, %f148;
	ld.global.f32 	%f149, [lightFalloffFakeDistanceMult];
	mul.f32 	%f13, %f147, %f149;
	ld.global.f32 	%f150, [lightInvCutoff];
	mul.f32 	%f14, %f147, %f150;
	mov.f32 	%f154, 0f40800000;
	abs.f32 	%f16, %f14;
	setp.lt.f32	%p13, %f16, 0f00800000;
	mul.f32 	%f156, %f16, 0f4B800000;
	selp.f32	%f157, 0fC3170000, 0fC2FE0000, %p13;
	selp.f32	%f158, %f156, %f16, %p13;
	mov.b32 	 %r45, %f158;
	and.b32  	%r46, %r45, 8388607;
	or.b32  	%r47, %r46, 1065353216;
	mov.b32 	 %f159, %r47;
	shr.u32 	%r48, %r45, 23;
	cvt.rn.f32.u32	%f160, %r48;
	add.f32 	%f161, %f157, %f160;
	setp.gt.f32	%p14, %f159, 0f3FB504F3;
	mul.f32 	%f162, %f159, 0f3F000000;
	add.f32 	%f163, %f161, 0f3F800000;
	selp.f32	%f164, %f162, %f159, %p14;
	selp.f32	%f165, %f163, %f161, %p14;
	add.f32 	%f166, %f164, 0fBF800000;
	add.f32 	%f137, %f164, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f136,%f137;
	// inline asm
	add.f32 	%f167, %f166, %f166;
	mul.f32 	%f168, %f136, %f167;
	mul.f32 	%f169, %f168, %f168;
	mov.f32 	%f170, 0f3C4CAF63;
	mov.f32 	%f171, 0f3B18F0FE;
	fma.rn.f32 	%f172, %f171, %f169, %f170;
	mov.f32 	%f173, 0f3DAAAABD;
	fma.rn.f32 	%f174, %f172, %f169, %f173;
	mul.rn.f32 	%f175, %f174, %f169;
	mul.rn.f32 	%f176, %f175, %f168;
	sub.f32 	%f177, %f166, %f168;
	neg.f32 	%f178, %f168;
	add.f32 	%f179, %f177, %f177;
	fma.rn.f32 	%f180, %f178, %f166, %f179;
	mul.rn.f32 	%f181, %f136, %f180;
	add.f32 	%f182, %f176, %f168;
	sub.f32 	%f183, %f168, %f182;
	add.f32 	%f184, %f176, %f183;
	add.f32 	%f185, %f181, %f184;
	add.f32 	%f186, %f182, %f185;
	sub.f32 	%f187, %f182, %f186;
	add.f32 	%f188, %f185, %f187;
	mov.f32 	%f189, 0f3F317200;
	mul.rn.f32 	%f190, %f165, %f189;
	mov.f32 	%f191, 0f35BFBE8E;
	mul.rn.f32 	%f192, %f165, %f191;
	add.f32 	%f193, %f190, %f186;
	sub.f32 	%f194, %f190, %f193;
	add.f32 	%f195, %f186, %f194;
	add.f32 	%f196, %f188, %f195;
	add.f32 	%f197, %f192, %f196;
	add.f32 	%f198, %f193, %f197;
	sub.f32 	%f199, %f193, %f198;
	add.f32 	%f200, %f197, %f199;
	mul.rn.f32 	%f201, %f154, %f198;
	neg.f32 	%f202, %f201;
	fma.rn.f32 	%f203, %f154, %f198, %f202;
	fma.rn.f32 	%f204, %f154, %f200, %f203;
	mov.f32 	%f205, 0f00000000;
	fma.rn.f32 	%f206, %f205, %f198, %f204;
	add.rn.f32 	%f207, %f201, %f206;
	neg.f32 	%f208, %f207;
	add.rn.f32 	%f209, %f201, %f208;
	add.rn.f32 	%f210, %f209, %f206;
	mov.b32 	 %r49, %f207;
	setp.eq.s32	%p15, %r49, 1118925336;
	add.s32 	%r50, %r49, -1;
	mov.b32 	 %f211, %r50;
	add.f32 	%f212, %f210, 0f37000000;
	selp.f32	%f213, %f211, %f207, %p15;
	selp.f32	%f17, %f212, %f210, %p15;
	mul.f32 	%f214, %f213, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f215, %f214;
	mov.f32 	%f216, 0fBF317200;
	fma.rn.f32 	%f217, %f215, %f216, %f213;
	mov.f32 	%f218, 0fB5BFBE8E;
	fma.rn.f32 	%f219, %f215, %f218, %f217;
	mul.f32 	%f220, %f219, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f221, %f220;
	add.f32 	%f222, %f215, 0f00000000;
	ex2.approx.f32 	%f223, %f222;
	mul.f32 	%f224, %f221, %f223;
	setp.lt.f32	%p16, %f213, 0fC2D20000;
	selp.f32	%f225, 0f00000000, %f224, %p16;
	setp.gt.f32	%p17, %f213, 0f42D20000;
	selp.f32	%f977, 0f7F800000, %f225, %p17;
	setp.eq.f32	%p18, %f977, 0f7F800000;
	@%p18 bra 	BB0_5;

	fma.rn.f32 	%f977, %f977, %f17, %f977;

BB0_5:
	mov.f32 	%f913, 0f40000000;
	cvt.rzi.f32.f32	%f912, %f913;
	add.f32 	%f911, %f912, %f912;
	mov.f32 	%f910, 0f40800000;
	sub.f32 	%f909, %f910, %f911;
	abs.f32 	%f908, %f909;
	setp.lt.f32	%p19, %f14, 0f00000000;
	setp.eq.f32	%p20, %f908, 0f3F800000;
	and.pred  	%p1, %p19, %p20;
	mov.b32 	 %r51, %f977;
	xor.b32  	%r52, %r51, -2147483648;
	mov.b32 	 %f226, %r52;
	selp.f32	%f979, %f226, %f977, %p1;
	setp.eq.f32	%p21, %f14, 0f00000000;
	@%p21 bra 	BB0_8;
	bra.uni 	BB0_6;

BB0_8:
	add.f32 	%f229, %f14, %f14;
	selp.f32	%f979, %f229, 0f00000000, %p20;
	bra.uni 	BB0_9;

BB0_6:
	setp.geu.f32	%p22, %f14, 0f00000000;
	@%p22 bra 	BB0_9;

	mov.f32 	%f954, 0f40800000;
	cvt.rzi.f32.f32	%f228, %f954;
	setp.neu.f32	%p23, %f228, 0f40800000;
	selp.f32	%f979, 0f7FFFFFFF, %f979, %p23;

BB0_9:
	abs.f32 	%f914, %f14;
	add.f32 	%f230, %f914, 0f40800000;
	mov.b32 	 %r53, %f230;
	setp.lt.s32	%p25, %r53, 2139095040;
	@%p25 bra 	BB0_14;

	abs.f32 	%f952, %f14;
	setp.gtu.f32	%p26, %f952, 0f7F800000;
	@%p26 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f979, %f14, 0f40800000;
	bra.uni 	BB0_14;

BB0_11:
	abs.f32 	%f953, %f14;
	setp.neu.f32	%p27, %f953, 0f7F800000;
	@%p27 bra 	BB0_14;

	selp.f32	%f979, 0fFF800000, 0f7F800000, %p1;

BB0_14:
	mov.f32 	%f922, 0fB5BFBE8E;
	mov.f32 	%f921, 0fBF317200;
	mov.f32 	%f920, 0f00000000;
	mov.f32 	%f919, 0f35BFBE8E;
	mov.f32 	%f918, 0f3F317200;
	mov.f32 	%f917, 0f3DAAAABD;
	mov.f32 	%f916, 0f3C4CAF63;
	mov.f32 	%f915, 0f3B18F0FE;
	mov.f32 	%f233, 0f3F800000;
	sub.f32 	%f234, %f233, %f979;
	setp.eq.f32	%p28, %f14, 0f3F800000;
	selp.f32	%f235, 0f00000000, %f234, %p28;
	cvt.sat.f32.f32	%f236, %f235;
	fma.rn.f32 	%f237, %f13, %f13, 0f3F800000;
	div.rn.f32 	%f28, %f236, %f237;
	mul.f32 	%f238, %f975, %f11;
	fma.rn.f32 	%f239, %f974, %f10, %f238;
	fma.rn.f32 	%f240, %f976, %f12, %f239;
	ld.global.u32 	%r54, [ignoreNormal];
	setp.eq.s32	%p29, %r54, 0;
	selp.f32	%f29, %f240, 0f3F800000, %p29;
	fma.rn.f32 	%f241, %f29, 0f3F000000, 0f3F000000;
	cvt.sat.f32.f32	%f242, %f241;
	add.f32 	%f30, %f242, %f242;
	mov.f32 	%f246, 0f41A00000;
	abs.f32 	%f32, %f30;
	setp.lt.f32	%p30, %f32, 0f00800000;
	mul.f32 	%f248, %f32, 0f4B800000;
	selp.f32	%f249, 0fC3170000, 0fC2FE0000, %p30;
	selp.f32	%f250, %f248, %f32, %p30;
	mov.b32 	 %r55, %f250;
	and.b32  	%r56, %r55, 8388607;
	or.b32  	%r57, %r56, 1065353216;
	mov.b32 	 %f251, %r57;
	shr.u32 	%r58, %r55, 23;
	cvt.rn.f32.u32	%f252, %r58;
	add.f32 	%f253, %f249, %f252;
	setp.gt.f32	%p31, %f251, 0f3FB504F3;
	mul.f32 	%f254, %f251, 0f3F000000;
	add.f32 	%f255, %f253, 0f3F800000;
	selp.f32	%f256, %f254, %f251, %p31;
	selp.f32	%f257, %f255, %f253, %p31;
	add.f32 	%f258, %f256, 0fBF800000;
	add.f32 	%f232, %f256, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f231,%f232;
	// inline asm
	add.f32 	%f259, %f258, %f258;
	mul.f32 	%f260, %f231, %f259;
	mul.f32 	%f261, %f260, %f260;
	fma.rn.f32 	%f264, %f915, %f261, %f916;
	fma.rn.f32 	%f266, %f264, %f261, %f917;
	mul.rn.f32 	%f267, %f266, %f261;
	mul.rn.f32 	%f268, %f267, %f260;
	sub.f32 	%f269, %f258, %f260;
	neg.f32 	%f270, %f260;
	add.f32 	%f271, %f269, %f269;
	fma.rn.f32 	%f272, %f270, %f258, %f271;
	mul.rn.f32 	%f273, %f231, %f272;
	add.f32 	%f274, %f268, %f260;
	sub.f32 	%f275, %f260, %f274;
	add.f32 	%f276, %f268, %f275;
	add.f32 	%f277, %f273, %f276;
	add.f32 	%f278, %f274, %f277;
	sub.f32 	%f279, %f274, %f278;
	add.f32 	%f280, %f277, %f279;
	mul.rn.f32 	%f282, %f257, %f918;
	mul.rn.f32 	%f284, %f257, %f919;
	add.f32 	%f285, %f282, %f278;
	sub.f32 	%f286, %f282, %f285;
	add.f32 	%f287, %f278, %f286;
	add.f32 	%f288, %f280, %f287;
	add.f32 	%f289, %f284, %f288;
	add.f32 	%f290, %f285, %f289;
	sub.f32 	%f291, %f285, %f290;
	add.f32 	%f292, %f289, %f291;
	mul.rn.f32 	%f293, %f246, %f290;
	neg.f32 	%f294, %f293;
	fma.rn.f32 	%f295, %f246, %f290, %f294;
	fma.rn.f32 	%f296, %f246, %f292, %f295;
	fma.rn.f32 	%f298, %f920, %f290, %f296;
	add.rn.f32 	%f299, %f293, %f298;
	neg.f32 	%f300, %f299;
	add.rn.f32 	%f301, %f293, %f300;
	add.rn.f32 	%f302, %f301, %f298;
	mov.b32 	 %r59, %f299;
	setp.eq.s32	%p32, %r59, 1118925336;
	add.s32 	%r60, %r59, -1;
	mov.b32 	 %f303, %r60;
	add.f32 	%f304, %f302, 0f37000000;
	selp.f32	%f305, %f303, %f299, %p32;
	selp.f32	%f33, %f304, %f302, %p32;
	mul.f32 	%f306, %f305, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f307, %f306;
	fma.rn.f32 	%f309, %f307, %f921, %f305;
	fma.rn.f32 	%f311, %f307, %f922, %f309;
	mul.f32 	%f312, %f311, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f313, %f312;
	add.f32 	%f314, %f307, 0f00000000;
	ex2.approx.f32 	%f315, %f314;
	mul.f32 	%f316, %f313, %f315;
	setp.lt.f32	%p33, %f305, 0fC2D20000;
	selp.f32	%f317, 0f00000000, %f316, %p33;
	setp.gt.f32	%p34, %f305, 0f42D20000;
	selp.f32	%f980, 0f7F800000, %f317, %p34;
	setp.eq.f32	%p35, %f980, 0f7F800000;
	@%p35 bra 	BB0_16;

	fma.rn.f32 	%f980, %f980, %f33, %f980;

BB0_16:
	mov.f32 	%f960, 0f41200000;
	cvt.rzi.f32.f32	%f959, %f960;
	add.f32 	%f958, %f959, %f959;
	mov.f32 	%f957, 0f41A00000;
	sub.f32 	%f956, %f957, %f958;
	abs.f32 	%f955, %f956;
	setp.lt.f32	%p36, %f30, 0f00000000;
	setp.eq.f32	%p37, %f955, 0f3F800000;
	and.pred  	%p2, %p36, %p37;
	mov.b32 	 %r61, %f980;
	xor.b32  	%r62, %r61, -2147483648;
	mov.b32 	 %f318, %r62;
	selp.f32	%f982, %f318, %f980, %p2;
	setp.eq.f32	%p38, %f30, 0f00000000;
	@%p38 bra 	BB0_19;
	bra.uni 	BB0_17;

BB0_19:
	add.f32 	%f321, %f30, %f30;
	selp.f32	%f982, %f321, 0f00000000, %p37;
	bra.uni 	BB0_20;

BB0_17:
	setp.geu.f32	%p39, %f30, 0f00000000;
	@%p39 bra 	BB0_20;

	mov.f32 	%f965, 0f41A00000;
	cvt.rzi.f32.f32	%f320, %f965;
	setp.neu.f32	%p40, %f320, 0f41A00000;
	selp.f32	%f982, 0f7FFFFFFF, %f982, %p40;

BB0_20:
	abs.f32 	%f961, %f30;
	add.f32 	%f322, %f961, 0f41A00000;
	mov.b32 	 %r63, %f322;
	setp.lt.s32	%p42, %r63, 2139095040;
	@%p42 bra 	BB0_25;

	abs.f32 	%f963, %f30;
	setp.gtu.f32	%p43, %f963, 0f7F800000;
	@%p43 bra 	BB0_24;
	bra.uni 	BB0_22;

BB0_24:
	add.f32 	%f982, %f30, 0f41A00000;
	bra.uni 	BB0_25;

BB0_22:
	abs.f32 	%f964, %f30;
	setp.neu.f32	%p44, %f964, 0f7F800000;
	@%p44 bra 	BB0_25;

	selp.f32	%f982, 0fFF800000, 0f7F800000, %p2;

BB0_25:
	setp.eq.f32	%p45, %f30, 0f3F800000;
	selp.f32	%f330, 0f3F800000, %f982, %p45;
	cvt.sat.f32.f32	%f331, %f330;
	mul.f32 	%f44, %f28, %f331;
	ld.global.f32 	%f332, [lightMatrix];
	fma.rn.f32 	%f333, %f332, %f10, 0f00000000;
	ld.global.f32 	%f334, [lightMatrix+4];
	fma.rn.f32 	%f335, %f334, %f11, %f333;
	ld.global.f32 	%f336, [lightMatrix+8];
	fma.rn.f32 	%f329, %f336, %f12, %f335;
	mul.f32 	%f337, %f29, 0f40800000;
	cvt.sat.f32.f32	%f45, %f337;
	ld.global.f32 	%f338, [lightMatrix+12];
	fma.rn.f32 	%f339, %f338, %f10, 0f00000000;
	ld.global.f32 	%f340, [lightMatrix+16];
	fma.rn.f32 	%f341, %f340, %f11, %f339;
	ld.global.f32 	%f342, [lightMatrix+20];
	fma.rn.f32 	%f328, %f342, %f12, %f341;
	ld.global.f32 	%f343, [lightMatrix+24];
	fma.rn.f32 	%f344, %f343, %f10, 0f00000000;
	ld.global.f32 	%f345, [lightMatrix+28];
	fma.rn.f32 	%f346, %f345, %f11, %f344;
	ld.global.f32 	%f347, [lightMatrix+32];
	fma.rn.f32 	%f327, %f347, %f12, %f346;
	ld.global.u32 	%r64, [lightCubemap];
	mov.u32 	%r65, 6;
	mov.u32 	%r241, 0;
	// inline asm
	call (%f323, %f324, %f325, %f326), _rt_texture_get_base_id, (%r64, %r65, %f327, %f328, %f329, %r241);
	// inline asm
	max.f32 	%f348, %f323, %f324;
	max.f32 	%f349, %f348, %f325;
	mul.f32 	%f350, %f44, %f45;
	mul.f32 	%f351, %f350, %f349;
	setp.lt.f32	%p46, %f351, 0f3727C5AC;
	@%p46 bra 	BB0_95;
	bra.uni 	BB0_26;

BB0_95:
	ld.global.u32 	%r246, [imageEnabled];
	and.b32  	%r154, %r246, 1;
	setp.eq.b32	%p122, %r154, 1;
	@!%p122 bra 	BB0_97;
	bra.uni 	BB0_96;

BB0_96:
	cvt.u64.u32	%rd142, %r2;
	cvt.u64.u32	%rd143, %r3;
	mov.u64 	%rd146, image;
	cvta.global.u64 	%rd141, %rd146;
	// inline asm
	call (%rd140), _rt_buffer_get_64, (%rd141, %r24, %r25, %rd142, %rd143, %rd15, %rd15);
	// inline asm
	mov.u16 	%rs89, 1;
	mov.u16 	%rs90, 0;
	st.v4.u8 	[%rd140], {%rs90, %rs90, %rs90, %rs89};
	ld.global.u32 	%r246, [imageEnabled];

BB0_97:
	and.b32  	%r157, %r246, 8;
	setp.eq.s32	%p123, %r157, 0;
	@%p123 bra 	BB0_99;

	cvt.u64.u32	%rd150, %r3;
	cvt.u64.u32	%rd149, %r2;
	mov.u64 	%rd153, image_Mask;
	cvta.global.u64 	%rd148, %rd153;
	// inline asm
	call (%rd147), _rt_buffer_get_64, (%rd148, %r24, %r24, %rd149, %rd150, %rd15, %rd15);
	// inline asm
	mov.f32 	%f829, 0f00000000;
	cvt.rzi.u32.f32	%r160, %f829;
	cvt.u16.u32	%rs91, %r160;
	mov.u16 	%rs92, 255;
	st.v2.u8 	[%rd147], {%rs91, %rs92};
	ld.global.u32 	%r246, [imageEnabled];

BB0_99:
	cvt.u64.u32	%rd6, %r2;
	cvt.u64.u32	%rd7, %r3;
	and.b32  	%r161, %r246, 4;
	setp.eq.s32	%p124, %r161, 0;
	@%p124 bra 	BB0_103;

	ld.global.u32 	%r162, [additive];
	setp.eq.s32	%p125, %r162, 0;
	mov.f32 	%f830, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs93, %f830;}

	// inline asm
	@%p125 bra 	BB0_102;

	mov.u64 	%rd166, image_HDR;
	cvta.global.u64 	%rd155, %rd166;
	mov.u32 	%r166, 8;
	// inline asm
	call (%rd154), _rt_buffer_get_64, (%rd155, %r24, %r166, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs100, %rs101, %rs102, %rs103}, [%rd154];
	// inline asm
	{  cvt.f32.f16 %f831, %rs100;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f832, %rs101;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f833, %rs102;}

	// inline asm
	// inline asm
	call (%rd160), _rt_buffer_get_64, (%rd155, %r24, %r166, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f834, %f831, 0f00000000;
	add.f32 	%f835, %f832, 0f00000000;
	add.f32 	%f836, %f833, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs99, %f836;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f835;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs97, %f834;}

	// inline asm
	st.v4.u16 	[%rd160], {%rs97, %rs98, %rs99, %rs93};
	bra.uni 	BB0_103;

BB0_26:
	mov.f32 	%f984, 0f00000000;
	mul.f32 	%f353, %f7, 0f3456BF95;
	abs.f32 	%f354, %f974;
	div.rn.f32 	%f355, %f353, %f354;
	abs.f32 	%f356, %f975;
	mul.f32 	%f357, %f8, 0f3456BF95;
	div.rn.f32 	%f358, %f357, %f356;
	abs.f32 	%f359, %f976;
	mul.f32 	%f360, %f9, 0f3456BF95;
	div.rn.f32 	%f361, %f360, %f359;
	abs.f32 	%f362, %f355;
	abs.f32 	%f363, %f358;
	abs.f32 	%f364, %f361;
	mov.f32 	%f365, 0f38D1B717;
	max.f32 	%f366, %f362, %f365;
	max.f32 	%f367, %f363, %f365;
	max.f32 	%f368, %f364, %f365;
	fma.rn.f32 	%f49, %f974, %f366, %f7;
	fma.rn.f32 	%f50, %f975, %f367, %f8;
	fma.rn.f32 	%f51, %f976, %f368, %f9;
	ld.global.u32 	%r242, [samples];
	setp.lt.s32	%p47, %r242, 1;
	@%p47 bra 	BB0_29;

	mul.f32 	%f370, %f49, 0f3456BF95;
	abs.f32 	%f371, %f370;
	mul.f32 	%f372, %f50, 0f3456BF95;
	abs.f32 	%f373, %f372;
	mul.f32 	%f374, %f51, 0f3456BF95;
	abs.f32 	%f375, %f374;
	max.f32 	%f376, %f371, %f373;
	max.f32 	%f377, %f376, %f375;
	max.f32 	%f52, %f377, %f365;
	add.u64 	%rd24, %SP, 0;
	cvta.to.local.u64 	%rd2, %rd24;
	mov.f32 	%f984, 0f00000000;

BB0_28:
	cvt.rn.f32.s32	%f387, %r241;
	mul.f32 	%f388, %f387, 0f3DD32618;
	cvt.rmi.f32.f32	%f389, %f388;
	sub.f32 	%f390, %f388, %f389;
	mul.f32 	%f391, %f387, 0f3DD2F1AA;
	cvt.rmi.f32.f32	%f392, %f391;
	sub.f32 	%f393, %f391, %f392;
	mul.f32 	%f394, %f387, 0f3DC74539;
	cvt.rmi.f32.f32	%f395, %f394;
	sub.f32 	%f396, %f394, %f395;
	add.f32 	%f397, %f393, 0f4199851F;
	add.f32 	%f398, %f396, 0f4199851F;
	add.f32 	%f399, %f390, 0f4199851F;
	mul.f32 	%f400, %f393, %f398;
	fma.rn.f32 	%f401, %f390, %f397, %f400;
	fma.rn.f32 	%f402, %f399, %f396, %f401;
	add.f32 	%f403, %f390, %f402;
	add.f32 	%f404, %f393, %f402;
	add.f32 	%f405, %f396, %f402;
	add.f32 	%f406, %f403, %f404;
	mul.f32 	%f407, %f405, %f406;
	cvt.rmi.f32.f32	%f408, %f407;
	sub.f32 	%f409, %f407, %f408;
	add.f32 	%f410, %f403, %f405;
	mul.f32 	%f411, %f404, %f410;
	cvt.rmi.f32.f32	%f412, %f411;
	sub.f32 	%f413, %f411, %f412;
	add.f32 	%f414, %f404, %f405;
	mul.f32 	%f415, %f403, %f414;
	cvt.rmi.f32.f32	%f416, %f415;
	sub.f32 	%f417, %f415, %f416;
	fma.rn.f32 	%f418, %f409, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f419, %f413, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f420, %f417, 0f40000000, 0fBF800000;
	ld.global.f32 	%f421, [lightRadius];
	ld.global.f32 	%f422, [lightPos];
	fma.rn.f32 	%f423, %f421, %f418, %f422;
	ld.global.f32 	%f424, [lightPos+4];
	fma.rn.f32 	%f425, %f421, %f419, %f424;
	ld.global.f32 	%f426, [lightPos+8];
	fma.rn.f32 	%f427, %f421, %f420, %f426;
	sub.f32 	%f428, %f423, %f7;
	sub.f32 	%f429, %f425, %f8;
	sub.f32 	%f430, %f427, %f9;
	mul.f32 	%f431, %f429, %f429;
	fma.rn.f32 	%f432, %f428, %f428, %f431;
	fma.rn.f32 	%f433, %f430, %f430, %f432;
	sqrt.rn.f32 	%f386, %f433;
	rcp.rn.f32 	%f434, %f386;
	mul.f32 	%f382, %f434, %f428;
	mul.f32 	%f383, %f434, %f429;
	mul.f32 	%f384, %f434, %f430;
	mov.u32 	%r71, 1065353216;
	st.local.u32 	[%rd2], %r71;
	ld.global.u32 	%r68, [root];
	mov.u32 	%r69, 1;
	// inline asm
	call _rt_trace_64, (%r68, %f49, %f50, %f51, %f382, %f383, %f384, %r69, %f52, %f386, %rd24, %r25);
	// inline asm
	ld.local.f32 	%f435, [%rd2];
	add.f32 	%f984, %f984, %f435;
	ld.global.u32 	%r242, [samples];
	add.s32 	%r241, %r241, 1;
	setp.lt.s32	%p48, %r241, %r242;
	@%p48 bra 	BB0_28;

BB0_29:
	mov.f32 	%f985, 0f3F800000;
	setp.eq.s32	%p49, %r242, 0;
	@%p49 bra 	BB0_31;

	cvt.rn.f32.s32	%f437, %r242;
	div.rn.f32 	%f985, %f984, %f437;

BB0_31:
	cvt.sat.f32.f32	%f438, %f29;
	mul.f32 	%f439, %f44, %f438;
	mul.f32 	%f440, %f985, %f439;
	ld.global.f32 	%f441, [lightColor];
	mul.f32 	%f442, %f441, %f440;
	ld.global.f32 	%f443, [lightColor+4];
	mul.f32 	%f444, %f443, %f440;
	ld.global.f32 	%f445, [lightColor+8];
	mul.f32 	%f446, %f440, %f445;
	mul.f32 	%f58, %f323, %f442;
	mul.f32 	%f59, %f324, %f444;
	mul.f32 	%f60, %f325, %f446;
	ld.global.u32 	%r244, [imageEnabled];
	and.b32  	%r72, %r244, 8;
	setp.eq.s32	%p50, %r72, 0;
	@%p50 bra 	BB0_44;

	mov.f32 	%f930, 0fB5BFBE8E;
	mov.f32 	%f929, 0fBF317200;
	mov.f32 	%f928, 0f35BFBE8E;
	mov.f32 	%f927, 0f3F317200;
	mov.f32 	%f926, 0f3DAAAABD;
	mov.f32 	%f925, 0f3C4CAF63;
	mov.f32 	%f924, 0f3B18F0FE;
	cvt.u64.u32	%rd28, %r2;
	cvt.u64.u32	%rd29, %r3;
	mov.u64 	%rd32, image_Mask;
	cvta.global.u64 	%rd27, %rd32;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r24, %r24, %rd28, %rd29, %rd15, %rd15);
	// inline asm
	abs.f32 	%f62, %f985;
	setp.lt.f32	%p51, %f62, 0f00800000;
	mul.f32 	%f452, %f62, 0f4B800000;
	selp.f32	%f453, 0fC3170000, 0fC2FE0000, %p51;
	selp.f32	%f454, %f452, %f62, %p51;
	mov.b32 	 %r75, %f454;
	and.b32  	%r76, %r75, 8388607;
	or.b32  	%r77, %r76, 1065353216;
	mov.b32 	 %f455, %r77;
	shr.u32 	%r78, %r75, 23;
	cvt.rn.f32.u32	%f456, %r78;
	add.f32 	%f457, %f453, %f456;
	setp.gt.f32	%p52, %f455, 0f3FB504F3;
	mul.f32 	%f458, %f455, 0f3F000000;
	add.f32 	%f459, %f457, 0f3F800000;
	selp.f32	%f460, %f458, %f455, %p52;
	selp.f32	%f461, %f459, %f457, %p52;
	add.f32 	%f462, %f460, 0fBF800000;
	add.f32 	%f448, %f460, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f447,%f448;
	// inline asm
	add.f32 	%f463, %f462, %f462;
	mul.f32 	%f464, %f447, %f463;
	mul.f32 	%f465, %f464, %f464;
	fma.rn.f32 	%f468, %f924, %f465, %f925;
	fma.rn.f32 	%f470, %f468, %f465, %f926;
	mul.rn.f32 	%f471, %f470, %f465;
	mul.rn.f32 	%f472, %f471, %f464;
	sub.f32 	%f473, %f462, %f464;
	neg.f32 	%f474, %f464;
	add.f32 	%f475, %f473, %f473;
	fma.rn.f32 	%f476, %f474, %f462, %f475;
	mul.rn.f32 	%f477, %f447, %f476;
	add.f32 	%f478, %f472, %f464;
	sub.f32 	%f479, %f464, %f478;
	add.f32 	%f480, %f472, %f479;
	add.f32 	%f481, %f477, %f480;
	add.f32 	%f482, %f478, %f481;
	sub.f32 	%f483, %f478, %f482;
	add.f32 	%f484, %f481, %f483;
	mul.rn.f32 	%f486, %f461, %f927;
	mul.rn.f32 	%f488, %f461, %f928;
	add.f32 	%f489, %f486, %f482;
	sub.f32 	%f490, %f486, %f489;
	add.f32 	%f491, %f482, %f490;
	add.f32 	%f492, %f484, %f491;
	add.f32 	%f493, %f488, %f492;
	add.f32 	%f494, %f489, %f493;
	sub.f32 	%f495, %f489, %f494;
	add.f32 	%f496, %f493, %f495;
	mov.f32 	%f497, 0f3EE8BA2E;
	mul.rn.f32 	%f498, %f497, %f494;
	neg.f32 	%f499, %f498;
	fma.rn.f32 	%f500, %f497, %f494, %f499;
	fma.rn.f32 	%f501, %f497, %f496, %f500;
	mov.f32 	%f502, 0f00000000;
	fma.rn.f32 	%f503, %f502, %f494, %f501;
	add.rn.f32 	%f504, %f498, %f503;
	neg.f32 	%f505, %f504;
	add.rn.f32 	%f506, %f498, %f505;
	add.rn.f32 	%f507, %f506, %f503;
	mov.b32 	 %r79, %f504;
	setp.eq.s32	%p53, %r79, 1118925336;
	add.s32 	%r80, %r79, -1;
	mov.b32 	 %f508, %r80;
	add.f32 	%f509, %f507, 0f37000000;
	selp.f32	%f510, %f508, %f504, %p53;
	selp.f32	%f63, %f509, %f507, %p53;
	mul.f32 	%f511, %f510, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f512, %f511;
	fma.rn.f32 	%f514, %f512, %f929, %f510;
	fma.rn.f32 	%f516, %f512, %f930, %f514;
	mul.f32 	%f517, %f516, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f518, %f517;
	add.f32 	%f519, %f512, 0f00000000;
	ex2.approx.f32 	%f520, %f519;
	mul.f32 	%f521, %f518, %f520;
	setp.lt.f32	%p54, %f510, 0fC2D20000;
	selp.f32	%f522, 0f00000000, %f521, %p54;
	setp.gt.f32	%p55, %f510, 0f42D20000;
	selp.f32	%f986, 0f7F800000, %f522, %p55;
	setp.eq.f32	%p56, %f986, 0f7F800000;
	@%p56 bra 	BB0_34;

	fma.rn.f32 	%f986, %f986, %f63, %f986;

BB0_34:
	mov.f32 	%f969, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f968, %f969;
	fma.rn.f32 	%f967, %f968, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f966, %f967;
	setp.lt.f32	%p57, %f985, 0f00000000;
	setp.eq.f32	%p58, %f966, 0f3F800000;
	and.pred  	%p3, %p57, %p58;
	mov.b32 	 %r81, %f986;
	xor.b32  	%r82, %r81, -2147483648;
	mov.b32 	 %f523, %r82;
	selp.f32	%f988, %f523, %f986, %p3;
	setp.eq.f32	%p59, %f985, 0f00000000;
	@%p59 bra 	BB0_37;
	bra.uni 	BB0_35;

BB0_37:
	add.f32 	%f526, %f985, %f985;
	selp.f32	%f988, %f526, 0f00000000, %p58;
	bra.uni 	BB0_38;

BB0_122:
	mov.u64 	%rd287, image_HDR;
	cvta.global.u64 	%rd282, %rd287;
	mov.u32 	%r211, 8;
	// inline asm
	call (%rd281), _rt_buffer_get_64, (%rd282, %r24, %r211, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f879, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs167, %f879;}

	// inline asm
	mov.u16 	%rs168, 0;
	st.v4.u16 	[%rd281], {%rs167, %rs167, %rs167, %rs168};

BB0_123:
	ld.global.u32 	%r212, [additive];
	setp.eq.s32	%p134, %r212, 0;
	@%p134 bra 	BB0_125;

	mov.u64 	%rd300, image_RNM0;
	cvta.global.u64 	%rd289, %rd300;
	mov.u32 	%r216, 8;
	// inline asm
	call (%rd288), _rt_buffer_get_64, (%rd289, %r24, %r216, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs175, %rs176, %rs177, %rs178}, [%rd288];
	// inline asm
	{  cvt.f32.f16 %f880, %rs175;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f881, %rs176;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f882, %rs177;}

	// inline asm
	// inline asm
	call (%rd294), _rt_buffer_get_64, (%rd289, %r24, %r216, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f883, %f880, 0f00000000;
	add.f32 	%f884, %f881, 0f00000000;
	add.f32 	%f885, %f882, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs174, %f885;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs173, %f884;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs172, %f883;}

	// inline asm
	mov.u16 	%rs179, 0;
	st.v4.u16 	[%rd294], {%rs172, %rs173, %rs174, %rs179};
	bra.uni 	BB0_126;

BB0_125:
	mov.u64 	%rd307, image_RNM0;
	cvta.global.u64 	%rd302, %rd307;
	mov.u32 	%r218, 8;
	// inline asm
	call (%rd301), _rt_buffer_get_64, (%rd302, %r24, %r218, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f886, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs180, %f886;}

	// inline asm
	mov.u16 	%rs181, 0;
	st.v4.u16 	[%rd301], {%rs180, %rs180, %rs180, %rs181};

BB0_126:
	ld.global.u32 	%r219, [additive];
	setp.eq.s32	%p135, %r219, 0;
	@%p135 bra 	BB0_128;

	mov.u64 	%rd320, image_RNM1;
	cvta.global.u64 	%rd309, %rd320;
	mov.u32 	%r223, 8;
	// inline asm
	call (%rd308), _rt_buffer_get_64, (%rd309, %r24, %r223, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs188, %rs189, %rs190, %rs191}, [%rd308];
	// inline asm
	{  cvt.f32.f16 %f887, %rs188;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f888, %rs189;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f889, %rs190;}

	// inline asm
	// inline asm
	call (%rd314), _rt_buffer_get_64, (%rd309, %r24, %r223, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f890, %f887, 0f00000000;
	add.f32 	%f891, %f888, 0f00000000;
	add.f32 	%f892, %f889, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs187, %f892;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs186, %f891;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs185, %f890;}

	// inline asm
	mov.u16 	%rs192, 0;
	st.v4.u16 	[%rd314], {%rs185, %rs186, %rs187, %rs192};
	bra.uni 	BB0_129;

BB0_128:
	mov.u64 	%rd327, image_RNM1;
	cvta.global.u64 	%rd322, %rd327;
	mov.u32 	%r225, 8;
	// inline asm
	call (%rd321), _rt_buffer_get_64, (%rd322, %r24, %r225, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f893, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs193, %f893;}

	// inline asm
	mov.u16 	%rs194, 0;
	st.v4.u16 	[%rd321], {%rs193, %rs193, %rs193, %rs194};

BB0_129:
	ld.global.u32 	%r226, [additive];
	setp.eq.s32	%p136, %r226, 0;
	@%p136 bra 	BB0_131;

	mov.u64 	%rd340, image_RNM2;
	cvta.global.u64 	%rd329, %rd340;
	mov.u32 	%r230, 8;
	// inline asm
	call (%rd328), _rt_buffer_get_64, (%rd329, %r24, %r230, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs201, %rs202, %rs203, %rs204}, [%rd328];
	// inline asm
	{  cvt.f32.f16 %f894, %rs201;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f895, %rs202;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f896, %rs203;}

	// inline asm
	// inline asm
	call (%rd334), _rt_buffer_get_64, (%rd329, %r24, %r230, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f897, %f894, 0f00000000;
	add.f32 	%f898, %f895, 0f00000000;
	add.f32 	%f899, %f896, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs200, %f899;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs199, %f898;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs198, %f897;}

	// inline asm
	mov.u16 	%rs205, 0;
	st.v4.u16 	[%rd334], {%rs198, %rs199, %rs200, %rs205};
	bra.uni 	BB0_132;

BB0_131:
	mov.u64 	%rd347, image_RNM2;
	cvta.global.u64 	%rd342, %rd347;
	mov.u32 	%r232, 8;
	// inline asm
	call (%rd341), _rt_buffer_get_64, (%rd342, %r24, %r232, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f900, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs206, %f900;}

	// inline asm
	mov.u16 	%rs207, 0;
	st.v4.u16 	[%rd341], {%rs206, %rs206, %rs206, %rs207};

BB0_132:
	ld.global.u32 	%r233, [additive];
	setp.eq.s32	%p137, %r233, 0;
	@%p137 bra 	BB0_134;

	mov.u64 	%rd360, image_RNM3;
	cvta.global.u64 	%rd349, %rd360;
	mov.u32 	%r237, 8;
	// inline asm
	call (%rd348), _rt_buffer_get_64, (%rd349, %r24, %r237, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs214, %rs215, %rs216, %rs217}, [%rd348];
	// inline asm
	{  cvt.f32.f16 %f901, %rs214;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f902, %rs215;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f903, %rs216;}

	// inline asm
	// inline asm
	call (%rd354), _rt_buffer_get_64, (%rd349, %r24, %r237, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	add.f32 	%f904, %f901, 0f00000000;
	add.f32 	%f905, %f902, 0f00000000;
	add.f32 	%f906, %f903, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs213, %f906;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs212, %f905;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs211, %f904;}

	// inline asm
	mov.u16 	%rs218, 0;
	st.v4.u16 	[%rd354], {%rs211, %rs212, %rs213, %rs218};
	bra.uni 	BB0_135;

BB0_134:
	mov.u64 	%rd367, image_RNM3;
	cvta.global.u64 	%rd362, %rd367;
	mov.u32 	%r239, 8;
	// inline asm
	call (%rd361), _rt_buffer_get_64, (%rd362, %r24, %r239, %rd8, %rd9, %rd15, %rd15);
	// inline asm
	mov.f32 	%f907, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs219, %f907;}

	// inline asm
	mov.u16 	%rs220, 0;
	st.v4.u16 	[%rd361], {%rs219, %rs219, %rs219, %rs220};
	bra.uni 	BB0_135;

BB0_102:
	mov.u64 	%rd173, image_HDR;
	cvta.global.u64 	%rd168, %rd173;
	mov.u32 	%r168, 8;
	// inline asm
	call (%rd167), _rt_buffer_get_64, (%rd168, %r24, %r168, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f837, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f837;}

	// inline asm
	st.v4.u16 	[%rd167], {%rs104, %rs104, %rs104, %rs93};

BB0_103:
	ld.global.u32 	%r169, [additive];
	setp.eq.s32	%p126, %r169, 0;
	mov.f32 	%f838, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f838;}

	// inline asm
	@%p126 bra 	BB0_105;

	mov.u64 	%rd186, image_RNM0;
	cvta.global.u64 	%rd175, %rd186;
	mov.u32 	%r173, 8;
	// inline asm
	call (%rd174), _rt_buffer_get_64, (%rd175, %r24, %r173, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs112, %rs113, %rs114, %rs115}, [%rd174];
	// inline asm
	{  cvt.f32.f16 %f839, %rs112;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f840, %rs113;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f841, %rs114;}

	// inline asm
	// inline asm
	call (%rd180), _rt_buffer_get_64, (%rd175, %r24, %r173, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f842, %f839, 0f00000000;
	add.f32 	%f843, %f840, 0f00000000;
	add.f32 	%f844, %f841, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs111, %f844;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f843;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs109, %f842;}

	// inline asm
	st.v4.u16 	[%rd180], {%rs109, %rs110, %rs111, %rs105};
	bra.uni 	BB0_106;

BB0_105:
	mov.u64 	%rd193, image_RNM0;
	cvta.global.u64 	%rd188, %rd193;
	mov.u32 	%r175, 8;
	// inline asm
	call (%rd187), _rt_buffer_get_64, (%rd188, %r24, %r175, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f845, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f845;}

	// inline asm
	st.v4.u16 	[%rd187], {%rs116, %rs116, %rs116, %rs105};

BB0_106:
	ld.global.u32 	%r176, [additive];
	setp.eq.s32	%p127, %r176, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs117, %f838;}

	// inline asm
	@%p127 bra 	BB0_108;

	mov.u64 	%rd206, image_RNM1;
	cvta.global.u64 	%rd195, %rd206;
	mov.u32 	%r180, 8;
	// inline asm
	call (%rd194), _rt_buffer_get_64, (%rd195, %r24, %r180, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs124, %rs125, %rs126, %rs127}, [%rd194];
	// inline asm
	{  cvt.f32.f16 %f847, %rs124;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f848, %rs125;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f849, %rs126;}

	// inline asm
	// inline asm
	call (%rd200), _rt_buffer_get_64, (%rd195, %r24, %r180, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f850, %f847, 0f00000000;
	add.f32 	%f851, %f848, 0f00000000;
	add.f32 	%f852, %f849, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs123, %f852;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs122, %f851;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs121, %f850;}

	// inline asm
	st.v4.u16 	[%rd200], {%rs121, %rs122, %rs123, %rs117};
	bra.uni 	BB0_109;

BB0_108:
	mov.u64 	%rd213, image_RNM1;
	cvta.global.u64 	%rd208, %rd213;
	mov.u32 	%r182, 8;
	// inline asm
	call (%rd207), _rt_buffer_get_64, (%rd208, %r24, %r182, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f853, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs128, %f853;}

	// inline asm
	st.v4.u16 	[%rd207], {%rs128, %rs128, %rs128, %rs117};

BB0_109:
	ld.global.u32 	%r183, [additive];
	setp.eq.s32	%p128, %r183, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs129, %f838;}

	// inline asm
	@%p128 bra 	BB0_111;

	mov.u64 	%rd226, image_RNM2;
	cvta.global.u64 	%rd215, %rd226;
	mov.u32 	%r187, 8;
	// inline asm
	call (%rd214), _rt_buffer_get_64, (%rd215, %r24, %r187, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs136, %rs137, %rs138, %rs139}, [%rd214];
	// inline asm
	{  cvt.f32.f16 %f855, %rs136;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f856, %rs137;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f857, %rs138;}

	// inline asm
	// inline asm
	call (%rd220), _rt_buffer_get_64, (%rd215, %r24, %r187, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f858, %f855, 0f00000000;
	add.f32 	%f859, %f856, 0f00000000;
	add.f32 	%f860, %f857, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs135, %f860;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs134, %f859;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f858;}

	// inline asm
	st.v4.u16 	[%rd220], {%rs133, %rs134, %rs135, %rs129};
	bra.uni 	BB0_112;

BB0_111:
	mov.u64 	%rd233, image_RNM2;
	cvta.global.u64 	%rd228, %rd233;
	mov.u32 	%r189, 8;
	// inline asm
	call (%rd227), _rt_buffer_get_64, (%rd228, %r24, %r189, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f861, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs140, %f861;}

	// inline asm
	st.v4.u16 	[%rd227], {%rs140, %rs140, %rs140, %rs129};

BB0_112:
	ld.global.u32 	%r190, [additive];
	setp.eq.s32	%p129, %r190, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs141, %f838;}

	// inline asm
	@%p129 bra 	BB0_114;

	mov.u64 	%rd246, image_RNM3;
	cvta.global.u64 	%rd235, %rd246;
	mov.u32 	%r194, 8;
	// inline asm
	call (%rd234), _rt_buffer_get_64, (%rd235, %r24, %r194, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs148, %rs149, %rs150, %rs151}, [%rd234];
	// inline asm
	{  cvt.f32.f16 %f863, %rs148;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f864, %rs149;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f865, %rs150;}

	// inline asm
	// inline asm
	call (%rd240), _rt_buffer_get_64, (%rd235, %r24, %r194, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	add.f32 	%f866, %f863, 0f00000000;
	add.f32 	%f867, %f864, 0f00000000;
	add.f32 	%f868, %f865, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs147, %f868;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f867;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f866;}

	// inline asm
	st.v4.u16 	[%rd240], {%rs145, %rs146, %rs147, %rs141};
	bra.uni 	BB0_135;

BB0_114:
	mov.u64 	%rd253, image_RNM3;
	cvta.global.u64 	%rd248, %rd253;
	mov.u32 	%r196, 8;
	// inline asm
	call (%rd247), _rt_buffer_get_64, (%rd248, %r24, %r196, %rd6, %rd7, %rd15, %rd15);
	// inline asm
	mov.f32 	%f869, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs152, %f869;}

	// inline asm
	st.v4.u16 	[%rd247], {%rs152, %rs152, %rs152, %rs141};
	bra.uni 	BB0_135;

BB0_35:
	setp.geu.f32	%p60, %f985, 0f00000000;
	@%p60 bra 	BB0_38;

	mov.f32 	%f973, 0f3EE8BA2E;
	cvt.rzi.f32.f32	%f525, %f973;
	setp.neu.f32	%p61, %f525, 0f3EE8BA2E;
	selp.f32	%f988, 0f7FFFFFFF, %f988, %p61;

BB0_38:
	abs.f32 	%f970, %f985;
	add.f32 	%f527, %f970, 0f3EE8BA2E;
	mov.b32 	 %r83, %f527;
	setp.lt.s32	%p63, %r83, 2139095040;
	@%p63 bra 	BB0_43;

	abs.f32 	%f971, %f985;
	setp.gtu.f32	%p64, %f971, 0f7F800000;
	@%p64 bra 	BB0_42;
	bra.uni 	BB0_40;

BB0_42:
	add.f32 	%f988, %f985, 0f3EE8BA2E;
	bra.uni 	BB0_43;

BB0_40:
	abs.f32 	%f972, %f985;
	setp.neu.f32	%p65, %f972, 0f7F800000;
	@%p65 bra 	BB0_43;

	selp.f32	%f988, 0fFF800000, 0f7F800000, %p3;

BB0_43:
	mul.f32 	%f528, %f988, 0f437F0000;
	setp.eq.f32	%p66, %f985, 0f3F800000;
	selp.f32	%f529, 0f437F0000, %f528, %p66;
	cvt.rzi.u32.f32	%r84, %f529;
	cvt.u16.u32	%rs19, %r84;
	mov.u16 	%rs20, 255;
	st.v2.u8 	[%rd26], {%rs19, %rs20};
	ld.global.u32 	%r244, [imageEnabled];

BB0_44:
	and.b32  	%r85, %r244, 1;
	setp.eq.b32	%p67, %r85, 1;
	@!%p67 bra 	BB0_79;
	bra.uni 	BB0_45;

BB0_45:
	mov.f32 	%f937, 0fB5BFBE8E;
	mov.f32 	%f936, 0fBF317200;
	mov.f32 	%f935, 0f35BFBE8E;
	mov.f32 	%f934, 0f3F317200;
	mov.f32 	%f933, 0f3DAAAABD;
	mov.f32 	%f932, 0f3C4CAF63;
	mov.f32 	%f931, 0f3B18F0FE;
	mov.f32 	%f532, 0f3E666666;
	cvt.rzi.f32.f32	%f533, %f532;
	fma.rn.f32 	%f534, %f533, 0fC0000000, 0f3EE66666;
	abs.f32 	%f74, %f534;
	abs.f32 	%f75, %f58;
	setp.lt.f32	%p68, %f75, 0f00800000;
	mul.f32 	%f535, %f75, 0f4B800000;
	selp.f32	%f536, 0fC3170000, 0fC2FE0000, %p68;
	selp.f32	%f537, %f535, %f75, %p68;
	mov.b32 	 %r86, %f537;
	and.b32  	%r87, %r86, 8388607;
	or.b32  	%r88, %r87, 1065353216;
	mov.b32 	 %f538, %r88;
	shr.u32 	%r89, %r86, 23;
	cvt.rn.f32.u32	%f539, %r89;
	add.f32 	%f540, %f536, %f539;
	setp.gt.f32	%p69, %f538, 0f3FB504F3;
	mul.f32 	%f541, %f538, 0f3F000000;
	add.f32 	%f542, %f540, 0f3F800000;
	selp.f32	%f543, %f541, %f538, %p69;
	selp.f32	%f544, %f542, %f540, %p69;
	add.f32 	%f545, %f543, 0fBF800000;
	add.f32 	%f531, %f543, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// inline asm
	add.f32 	%f546, %f545, %f545;
	mul.f32 	%f547, %f530, %f546;
	mul.f32 	%f548, %f547, %f547;
	fma.rn.f32 	%f551, %f931, %f548, %f932;
	fma.rn.f32 	%f553, %f551, %f548, %f933;
	mul.rn.f32 	%f554, %f553, %f548;
	mul.rn.f32 	%f555, %f554, %f547;
	sub.f32 	%f556, %f545, %f547;
	neg.f32 	%f557, %f547;
	add.f32 	%f558, %f556, %f556;
	fma.rn.f32 	%f559, %f557, %f545, %f558;
	mul.rn.f32 	%f560, %f530, %f559;
	add.f32 	%f561, %f555, %f547;
	sub.f32 	%f562, %f547, %f561;
	add.f32 	%f563, %f555, %f562;
	add.f32 	%f564, %f560, %f563;
	add.f32 	%f565, %f561, %f564;
	sub.f32 	%f566, %f561, %f565;
	add.f32 	%f567, %f564, %f566;
	mul.rn.f32 	%f569, %f544, %f934;
	mul.rn.f32 	%f571, %f544, %f935;
	add.f32 	%f572, %f569, %f565;
	sub.f32 	%f573, %f569, %f572;
	add.f32 	%f574, %f565, %f573;
	add.f32 	%f575, %f567, %f574;
	add.f32 	%f576, %f571, %f575;
	add.f32 	%f577, %f572, %f576;
	sub.f32 	%f578, %f572, %f577;
	add.f32 	%f579, %f576, %f578;
	mov.f32 	%f580, 0f3EE66666;
	mul.rn.f32 	%f581, %f580, %f577;
	neg.f32 	%f582, %f581;
	fma.rn.f32 	%f583, %f580, %f577, %f582;
	fma.rn.f32 	%f584, %f580, %f579, %f583;
	mov.f32 	%f585, 0f00000000;
	fma.rn.f32 	%f586, %f585, %f577, %f584;
	add.rn.f32 	%f587, %f581, %f586;
	neg.f32 	%f588, %f587;
	add.rn.f32 	%f589, %f581, %f588;
	add.rn.f32 	%f590, %f589, %f586;
	mov.b32 	 %r90, %f587;
	setp.eq.s32	%p70, %r90, 1118925336;
	add.s32 	%r91, %r90, -1;
	mov.b32 	 %f591, %r91;
	add.f32 	%f592, %f590, 0f37000000;
	selp.f32	%f593, %f591, %f587, %p70;
	selp.f32	%f76, %f592, %f590, %p70;
	mul.f32 	%f594, %f593, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f595, %f594;
	fma.rn.f32 	%f597, %f595, %f936, %f593;
	fma.rn.f32 	%f599, %f595, %f937, %f597;
	mul.f32 	%f600, %f599, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f601, %f600;
	add.f32 	%f602, %f595, 0f00000000;
	ex2.approx.f32 	%f603, %f602;
	mul.f32 	%f604, %f601, %f603;
	setp.lt.f32	%p71, %f593, 0fC2D20000;
	selp.f32	%f605, 0f00000000, %f604, %p71;
	setp.gt.f32	%p72, %f593, 0f42D20000;
	selp.f32	%f989, 0f7F800000, %f605, %p72;
	setp.eq.f32	%p73, %f989, 0f7F800000;
	@%p73 bra 	BB0_47;

	fma.rn.f32 	%f989, %f989, %f76, %f989;

BB0_47:
	setp.lt.f32	%p74, %f58, 0f00000000;
	setp.eq.f32	%p75, %f74, 0f3F800000;
	and.pred  	%p4, %p74, %p75;
	mov.b32 	 %r92, %f989;
	xor.b32  	%r93, %r92, -2147483648;
	mov.b32 	 %f606, %r93;
	selp.f32	%f991, %f606, %f989, %p4;
	setp.eq.f32	%p76, %f58, 0f00000000;
	@%p76 bra 	BB0_50;
	bra.uni 	BB0_48;

BB0_50:
	add.f32 	%f609, %f58, %f58;
	selp.f32	%f991, %f609, 0f00000000, %p75;
	bra.uni 	BB0_51;

BB0_48:
	setp.geu.f32	%p77, %f58, 0f00000000;
	@%p77 bra 	BB0_51;

	cvt.rzi.f32.f32	%f608, %f580;
	setp.neu.f32	%p78, %f608, 0f3EE66666;
	selp.f32	%f991, 0f7FFFFFFF, %f991, %p78;

BB0_51:
	add.f32 	%f610, %f75, 0f3EE66666;
	mov.b32 	 %r94, %f610;
	setp.lt.s32	%p80, %r94, 2139095040;
	@%p80 bra 	BB0_56;

	setp.gtu.f32	%p81, %f75, 0f7F800000;
	@%p81 bra 	BB0_55;
	bra.uni 	BB0_53;

BB0_55:
	add.f32 	%f991, %f58, 0f3EE66666;
	bra.uni 	BB0_56;

BB0_53:
	setp.neu.f32	%p82, %f75, 0f7F800000;
	@%p82 bra 	BB0_56;

	selp.f32	%f991, 0fFF800000, 0f7F800000, %p4;

BB0_56:
	mov.f32 	%f944, 0fB5BFBE8E;
	mov.f32 	%f943, 0fBF317200;
	mov.f32 	%f942, 0f35BFBE8E;
	mov.f32 	%f941, 0f3F317200;
	mov.f32 	%f940, 0f3DAAAABD;
	mov.f32 	%f939, 0f3C4CAF63;
	mov.f32 	%f938, 0f3B18F0FE;
	setp.eq.f32	%p83, %f58, 0f3F800000;
	selp.f32	%f87, 0f3F800000, %f991, %p83;
	abs.f32 	%f88, %f59;
	setp.lt.f32	%p84, %f88, 0f00800000;
	mul.f32 	%f613, %f88, 0f4B800000;
	selp.f32	%f614, 0fC3170000, 0fC2FE0000, %p84;
	selp.f32	%f615, %f613, %f88, %p84;
	mov.b32 	 %r95, %f615;
	and.b32  	%r96, %r95, 8388607;
	or.b32  	%r97, %r96, 1065353216;
	mov.b32 	 %f616, %r97;
	shr.u32 	%r98, %r95, 23;
	cvt.rn.f32.u32	%f617, %r98;
	add.f32 	%f618, %f614, %f617;
	setp.gt.f32	%p85, %f616, 0f3FB504F3;
	mul.f32 	%f619, %f616, 0f3F000000;
	add.f32 	%f620, %f618, 0f3F800000;
	selp.f32	%f621, %f619, %f616, %p85;
	selp.f32	%f622, %f620, %f618, %p85;
	add.f32 	%f623, %f621, 0fBF800000;
	add.f32 	%f612, %f621, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// inline asm
	add.f32 	%f624, %f623, %f623;
	mul.f32 	%f625, %f611, %f624;
	mul.f32 	%f626, %f625, %f625;
	fma.rn.f32 	%f629, %f938, %f626, %f939;
	fma.rn.f32 	%f631, %f629, %f626, %f940;
	mul.rn.f32 	%f632, %f631, %f626;
	mul.rn.f32 	%f633, %f632, %f625;
	sub.f32 	%f634, %f623, %f625;
	neg.f32 	%f635, %f625;
	add.f32 	%f636, %f634, %f634;
	fma.rn.f32 	%f637, %f635, %f623, %f636;
	mul.rn.f32 	%f638, %f611, %f637;
	add.f32 	%f639, %f633, %f625;
	sub.f32 	%f640, %f625, %f639;
	add.f32 	%f641, %f633, %f640;
	add.f32 	%f642, %f638, %f641;
	add.f32 	%f643, %f639, %f642;
	sub.f32 	%f644, %f639, %f643;
	add.f32 	%f645, %f642, %f644;
	mul.rn.f32 	%f647, %f622, %f941;
	mul.rn.f32 	%f649, %f622, %f942;
	add.f32 	%f650, %f647, %f643;
	sub.f32 	%f651, %f647, %f650;
	add.f32 	%f652, %f643, %f651;
	add.f32 	%f653, %f645, %f652;
	add.f32 	%f654, %f649, %f653;
	add.f32 	%f655, %f650, %f654;
	sub.f32 	%f656, %f650, %f655;
	add.f32 	%f657, %f654, %f656;
	mul.rn.f32 	%f659, %f580, %f655;
	neg.f32 	%f660, %f659;
	fma.rn.f32 	%f661, %f580, %f655, %f660;
	fma.rn.f32 	%f662, %f580, %f657, %f661;
	fma.rn.f32 	%f664, %f585, %f655, %f662;
	add.rn.f32 	%f665, %f659, %f664;
	neg.f32 	%f666, %f665;
	add.rn.f32 	%f667, %f659, %f666;
	add.rn.f32 	%f668, %f667, %f664;
	mov.b32 	 %r99, %f665;
	setp.eq.s32	%p86, %r99, 1118925336;
	add.s32 	%r100, %r99, -1;
	mov.b32 	 %f669, %r100;
	add.f32 	%f670, %f668, 0f37000000;
	selp.f32	%f671, %f669, %f665, %p86;
	selp.f32	%f89, %f670, %f668, %p86;
	mul.f32 	%f672, %f671, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f673, %f672;
	fma.rn.f32 	%f675, %f673, %f943, %f671;
	fma.rn.f32 	%f677, %f673, %f944, %f675;
	mul.f32 	%f678, %f677, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f679, %f678;
	add.f32 	%f680, %f673, 0f00000000;
	ex2.approx.f32 	%f681, %f680;
	mul.f32 	%f682, %f679, %f681;
	setp.lt.f32	%p87, %f671, 0fC2D20000;
	selp.f32	%f683, 0f00000000, %f682, %p87;
	setp.gt.f32	%p88, %f671, 0f42D20000;
	selp.f32	%f992, 0f7F800000, %f683, %p88;
	setp.eq.f32	%p89, %f992, 0f7F800000;
	@%p89 bra 	BB0_58;

	fma.rn.f32 	%f992, %f992, %f89, %f992;

BB0_58:
	setp.lt.f32	%p90, %f59, 0f00000000;
	and.pred  	%p5, %p90, %p75;
	mov.b32 	 %r101, %f992;
	xor.b32  	%r102, %r101, -2147483648;
	mov.b32 	 %f684, %r102;
	selp.f32	%f994, %f684, %f992, %p5;
	setp.eq.f32	%p92, %f59, 0f00000000;
	@%p92 bra 	BB0_61;
	bra.uni 	BB0_59;

BB0_61:
	add.f32 	%f687, %f59, %f59;
	selp.f32	%f994, %f687, 0f00000000, %p75;
	bra.uni 	BB0_62;

BB0_59:
	setp.geu.f32	%p93, %f59, 0f00000000;
	@%p93 bra 	BB0_62;

	cvt.rzi.f32.f32	%f686, %f580;
	setp.neu.f32	%p94, %f686, 0f3EE66666;
	selp.f32	%f994, 0f7FFFFFFF, %f994, %p94;

BB0_62:
	add.f32 	%f688, %f88, 0f3EE66666;
	mov.b32 	 %r103, %f688;
	setp.lt.s32	%p96, %r103, 2139095040;
	@%p96 bra 	BB0_67;

	setp.gtu.f32	%p97, %f88, 0f7F800000;
	@%p97 bra 	BB0_66;
	bra.uni 	BB0_64;

BB0_66:
	add.f32 	%f994, %f59, 0f3EE66666;
	bra.uni 	BB0_67;

BB0_64:
	setp.neu.f32	%p98, %f88, 0f7F800000;
	@%p98 bra 	BB0_67;

	selp.f32	%f994, 0fFF800000, 0f7F800000, %p5;

BB0_67:
	mov.f32 	%f951, 0fB5BFBE8E;
	mov.f32 	%f950, 0fBF317200;
	mov.f32 	%f949, 0f35BFBE8E;
	mov.f32 	%f948, 0f3F317200;
	mov.f32 	%f947, 0f3DAAAABD;
	mov.f32 	%f946, 0f3C4CAF63;
	mov.f32 	%f945, 0f3B18F0FE;
	setp.eq.f32	%p99, %f59, 0f3F800000;
	selp.f32	%f100, 0f3F800000, %f994, %p99;
	abs.f32 	%f101, %f60;
	setp.lt.f32	%p100, %f101, 0f00800000;
	mul.f32 	%f691, %f101, 0f4B800000;
	selp.f32	%f692, 0fC3170000, 0fC2FE0000, %p100;
	selp.f32	%f693, %f691, %f101, %p100;
	mov.b32 	 %r104, %f693;
	and.b32  	%r105, %r104, 8388607;
	or.b32  	%r106, %r105, 1065353216;
	mov.b32 	 %f694, %r106;
	shr.u32 	%r107, %r104, 23;
	cvt.rn.f32.u32	%f695, %r107;
	add.f32 	%f696, %f692, %f695;
	setp.gt.f32	%p101, %f694, 0f3FB504F3;
	mul.f32 	%f697, %f694, 0f3F000000;
	add.f32 	%f698, %f696, 0f3F800000;
	selp.f32	%f699, %f697, %f694, %p101;
	selp.f32	%f700, %f698, %f696, %p101;
	add.f32 	%f701, %f699, 0fBF800000;
	add.f32 	%f690, %f699, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f689,%f690;
	// inline asm
	add.f32 	%f702, %f701, %f701;
	mul.f32 	%f703, %f689, %f702;
	mul.f32 	%f704, %f703, %f703;
	fma.rn.f32 	%f707, %f945, %f704, %f946;
	fma.rn.f32 	%f709, %f707, %f704, %f947;
	mul.rn.f32 	%f710, %f709, %f704;
	mul.rn.f32 	%f711, %f710, %f703;
	sub.f32 	%f712, %f701, %f703;
	neg.f32 	%f713, %f703;
	add.f32 	%f714, %f712, %f712;
	fma.rn.f32 	%f715, %f713, %f701, %f714;
	mul.rn.f32 	%f716, %f689, %f715;
	add.f32 	%f717, %f711, %f703;
	sub.f32 	%f718, %f703, %f717;
	add.f32 	%f719, %f711, %f718;
	add.f32 	%f720, %f716, %f719;
	add.f32 	%f721, %f717, %f720;
	sub.f32 	%f722, %f717, %f721;
	add.f32 	%f723, %f720, %f722;
	mul.rn.f32 	%f725, %f700, %f948;
	mul.rn.f32 	%f727, %f700, %f949;
	add.f32 	%f728, %f725, %f721;
	sub.f32 	%f729, %f725, %f728;
	add.f32 	%f730, %f721, %f729;
	add.f32 	%f731, %f723, %f730;
	add.f32 	%f732, %f727, %f731;
	add.f32 	%f733, %f728, %f732;
	sub.f32 	%f734, %f728, %f733;
	add.f32 	%f735, %f732, %f734;
	mul.rn.f32 	%f737, %f580, %f733;
	neg.f32 	%f738, %f737;
	fma.rn.f32 	%f739, %f580, %f733, %f738;
	fma.rn.f32 	%f740, %f580, %f735, %f739;
	fma.rn.f32 	%f742, %f585, %f733, %f740;
	add.rn.f32 	%f743, %f737, %f742;
	neg.f32 	%f744, %f743;
	add.rn.f32 	%f745, %f737, %f744;
	add.rn.f32 	%f746, %f745, %f742;
	mov.b32 	 %r108, %f743;
	setp.eq.s32	%p102, %r108, 1118925336;
	add.s32 	%r109, %r108, -1;
	mov.b32 	 %f747, %r109;
	add.f32 	%f748, %f746, 0f37000000;
	selp.f32	%f749, %f747, %f743, %p102;
	selp.f32	%f102, %f748, %f746, %p102;
	mul.f32 	%f750, %f749, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f751, %f750;
	fma.rn.f32 	%f753, %f751, %f950, %f749;
	fma.rn.f32 	%f755, %f751, %f951, %f753;
	mul.f32 	%f756, %f755, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f757, %f756;
	add.f32 	%f758, %f751, 0f00000000;
	ex2.approx.f32 	%f759, %f758;
	mul.f32 	%f760, %f757, %f759;
	setp.lt.f32	%p103, %f749, 0fC2D20000;
	selp.f32	%f761, 0f00000000, %f760, %p103;
	setp.gt.f32	%p104, %f749, 0f42D20000;
	selp.f32	%f995, 0f7F800000, %f761, %p104;
	setp.eq.f32	%p105, %f995, 0f7F800000;
	@%p105 bra 	BB0_69;

	fma.rn.f32 	%f995, %f995, %f102, %f995;

BB0_69:
	setp.lt.f32	%p106, %f60, 0f00000000;
	and.pred  	%p6, %p106, %p75;
	mov.b32 	 %r110, %f995;
	xor.b32  	%r111, %r110, -2147483648;
	mov.b32 	 %f762, %r111;
	selp.f32	%f997, %f762, %f995, %p6;
	setp.eq.f32	%p108, %f60, 0f00000000;
	@%p108 bra 	BB0_72;
	bra.uni 	BB0_70;

BB0_72:
	add.f32 	%f765, %f60, %f60;
	selp.f32	%f997, %f765, 0f00000000, %p75;
	bra.uni 	BB0_73;

BB0_70:
	setp.geu.f32	%p109, %f60, 0f00000000;
	@%p109 bra 	BB0_73;

	cvt.rzi.f32.f32	%f764, %f580;
	setp.neu.f32	%p110, %f764, 0f3EE66666;
	selp.f32	%f997, 0f7FFFFFFF, %f997, %p110;

BB0_73:
	add.f32 	%f766, %f101, 0f3EE66666;
	mov.b32 	 %r112, %f766;
	setp.lt.s32	%p112, %r112, 2139095040;
	@%p112 bra 	BB0_78;

	setp.gtu.f32	%p113, %f101, 0f7F800000;
	@%p113 bra 	BB0_77;
	bra.uni 	BB0_75;

BB0_77:
	add.f32 	%f997, %f60, 0f3EE66666;
	bra.uni 	BB0_78;

BB0_75:
	setp.neu.f32	%p114, %f101, 0f7F800000;
	@%p114 bra 	BB0_78;

	selp.f32	%f997, 0fFF800000, 0f7F800000, %p6;

BB0_78:
	mov.u32 	%r240, 4;
	setp.eq.f32	%p115, %f60, 0f3F800000;
	selp.f32	%f767, 0f3F800000, %f997, %p115;
	cvt.u64.u32	%rd36, %r3;
	cvt.u64.u32	%rd35, %r2;
	mov.u64 	%rd39, image;
	cvta.global.u64 	%rd34, %rd39;
	// inline asm
	call (%rd33), _rt_buffer_get_64, (%rd34, %r24, %r240, %rd35, %rd36, %rd15, %rd15);
	// inline asm
	cvt.sat.f32.f32	%f768, %f767;
	mul.f32 	%f769, %f768, 0f437FFD71;
	cvt.rzi.u32.f32	%r115, %f769;
	cvt.sat.f32.f32	%f770, %f100;
	mul.f32 	%f771, %f770, 0f437FFD71;
	cvt.rzi.u32.f32	%r116, %f771;
	cvt.sat.f32.f32	%f772, %f87;
	mul.f32 	%f773, %f772, 0f437FFD71;
	cvt.rzi.u32.f32	%r117, %f773;
	cvt.u16.u32	%rs21, %r115;
	cvt.u16.u32	%rs22, %r117;
	cvt.u16.u32	%rs23, %r116;
	mov.u16 	%rs24, 255;
	st.v4.u8 	[%rd33], {%rs21, %rs23, %rs22, %rs24};
	ld.global.u32 	%r244, [imageEnabled];

BB0_79:
	cvt.u64.u32	%rd4, %r2;
	cvt.u64.u32	%rd5, %r3;
	and.b32  	%r118, %r244, 4;
	setp.eq.s32	%p116, %r118, 0;
	@%p116 bra 	BB0_83;

	ld.global.u32 	%r119, [additive];
	setp.eq.s32	%p117, %r119, 0;
	mov.f32 	%f774, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs25, %f774;}

	// inline asm
	@%p117 bra 	BB0_82;

	mov.u64 	%rd52, image_HDR;
	cvta.global.u64 	%rd41, %rd52;
	mov.u32 	%r123, 8;
	// inline asm
	call (%rd40), _rt_buffer_get_64, (%rd41, %r24, %r123, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs32, %rs33, %rs34, %rs35}, [%rd40];
	// inline asm
	{  cvt.f32.f16 %f775, %rs32;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f776, %rs33;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f777, %rs34;}

	// inline asm
	// inline asm
	call (%rd46), _rt_buffer_get_64, (%rd41, %r24, %r123, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f778, %f58, %f775;
	add.f32 	%f779, %f59, %f776;
	add.f32 	%f780, %f60, %f777;
	// inline asm
	{  cvt.rn.f16.f32 %rs31, %f780;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs30, %f779;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f778;}

	// inline asm
	st.v4.u16 	[%rd46], {%rs29, %rs30, %rs31, %rs25};
	bra.uni 	BB0_83;

BB0_82:
	mov.u64 	%rd59, image_HDR;
	cvta.global.u64 	%rd54, %rd59;
	mov.u32 	%r125, 8;
	// inline asm
	call (%rd53), _rt_buffer_get_64, (%rd54, %r24, %r125, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs38, %f60;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs37, %f59;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f58;}

	// inline asm
	st.v4.u16 	[%rd53], {%rs36, %rs37, %rs38, %rs25};

BB0_83:
	mul.f32 	%f785, %f44, 0f3E800000;
	mul.f32 	%f786, %f785, %f985;
	mul.f32 	%f787, %f45, %f786;
	ld.global.f32 	%f788, [lightColor];
	mul.f32 	%f789, %f787, %f788;
	ld.global.f32 	%f790, [lightColor+4];
	mul.f32 	%f791, %f787, %f790;
	ld.global.f32 	%f792, [lightColor+8];
	mul.f32 	%f793, %f787, %f792;
	mul.f32 	%f113, %f323, %f789;
	mul.f32 	%f114, %f324, %f791;
	mul.f32 	%f115, %f325, %f793;
	ld.global.u32 	%r126, [additive];
	setp.eq.s32	%p118, %r126, 0;
	mov.f32 	%f784, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs39, %f784;}

	// inline asm
	@%p118 bra 	BB0_85;

	mov.u64 	%rd72, image_RNM0;
	cvta.global.u64 	%rd61, %rd72;
	mov.u32 	%r130, 8;
	// inline asm
	call (%rd60), _rt_buffer_get_64, (%rd61, %r24, %r130, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs46, %rs47, %rs48, %rs49}, [%rd60];
	// inline asm
	{  cvt.f32.f16 %f794, %rs46;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f795, %rs47;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f796, %rs48;}

	// inline asm
	// inline asm
	call (%rd66), _rt_buffer_get_64, (%rd61, %r24, %r130, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f797, %f113, %f794;
	add.f32 	%f798, %f114, %f795;
	add.f32 	%f799, %f115, %f796;
	// inline asm
	{  cvt.rn.f16.f32 %rs45, %f799;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs44, %f798;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs43, %f797;}

	// inline asm
	st.v4.u16 	[%rd66], {%rs43, %rs44, %rs45, %rs39};
	bra.uni 	BB0_86;

BB0_85:
	mov.u64 	%rd79, image_RNM0;
	cvta.global.u64 	%rd74, %rd79;
	mov.u32 	%r132, 8;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r24, %r132, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs52, %f115;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs51, %f114;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs50, %f113;}

	// inline asm
	st.v4.u16 	[%rd73], {%rs50, %rs51, %rs52, %rs39};

BB0_86:
	fma.rn.f32 	%f116, %f10, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f117, %f11, 0f3F000000, 0f3F000000;
	fma.rn.f32 	%f118, %f12, 0f3F000000, 0f3F000000;
	ld.global.u32 	%r133, [additive];
	setp.eq.s32	%p119, %r133, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs53, %f784;}

	// inline asm
	@%p119 bra 	BB0_88;

	mov.u64 	%rd92, image_RNM1;
	cvta.global.u64 	%rd81, %rd92;
	mov.u32 	%r137, 8;
	// inline asm
	call (%rd80), _rt_buffer_get_64, (%rd81, %r24, %r137, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs60, %rs61, %rs62, %rs63}, [%rd80];
	// inline asm
	{  cvt.f32.f16 %f804, %rs60;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f805, %rs61;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f806, %rs62;}

	// inline asm
	// inline asm
	call (%rd86), _rt_buffer_get_64, (%rd81, %r24, %r137, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f807, %f116, %f804;
	add.f32 	%f808, %f116, %f805;
	add.f32 	%f809, %f116, %f806;
	// inline asm
	{  cvt.rn.f16.f32 %rs59, %f809;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs58, %f808;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs57, %f807;}

	// inline asm
	st.v4.u16 	[%rd86], {%rs57, %rs58, %rs59, %rs53};
	bra.uni 	BB0_89;

BB0_88:
	mov.u64 	%rd99, image_RNM1;
	cvta.global.u64 	%rd94, %rd99;
	mov.u32 	%r139, 8;
	// inline asm
	call (%rd93), _rt_buffer_get_64, (%rd94, %r24, %r139, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f116;}

	// inline asm
	st.v4.u16 	[%rd93], {%rs64, %rs64, %rs64, %rs53};

BB0_89:
	ld.global.u32 	%r140, [additive];
	setp.eq.s32	%p120, %r140, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs65, %f784;}

	// inline asm
	@%p120 bra 	BB0_91;

	mov.u64 	%rd112, image_RNM2;
	cvta.global.u64 	%rd101, %rd112;
	mov.u32 	%r144, 8;
	// inline asm
	call (%rd100), _rt_buffer_get_64, (%rd101, %r24, %r144, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs72, %rs73, %rs74, %rs75}, [%rd100];
	// inline asm
	{  cvt.f32.f16 %f812, %rs72;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f813, %rs73;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f814, %rs74;}

	// inline asm
	// inline asm
	call (%rd106), _rt_buffer_get_64, (%rd101, %r24, %r144, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f815, %f117, %f812;
	add.f32 	%f816, %f117, %f813;
	add.f32 	%f817, %f117, %f814;
	// inline asm
	{  cvt.rn.f16.f32 %rs71, %f817;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs70, %f816;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f815;}

	// inline asm
	st.v4.u16 	[%rd106], {%rs69, %rs70, %rs71, %rs65};
	bra.uni 	BB0_92;

BB0_91:
	mov.u64 	%rd119, image_RNM2;
	cvta.global.u64 	%rd114, %rd119;
	mov.u32 	%r146, 8;
	// inline asm
	call (%rd113), _rt_buffer_get_64, (%rd114, %r24, %r146, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f117;}

	// inline asm
	st.v4.u16 	[%rd113], {%rs76, %rs76, %rs76, %rs65};

BB0_92:
	ld.global.u32 	%r147, [additive];
	setp.eq.s32	%p121, %r147, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f784;}

	// inline asm
	@%p121 bra 	BB0_94;

	mov.u64 	%rd132, image_RNM3;
	cvta.global.u64 	%rd121, %rd132;
	mov.u32 	%r151, 8;
	// inline asm
	call (%rd120), _rt_buffer_get_64, (%rd121, %r24, %r151, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	ld.v4.u16 	{%rs84, %rs85, %rs86, %rs87}, [%rd120];
	// inline asm
	{  cvt.f32.f16 %f820, %rs84;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f821, %rs85;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f822, %rs86;}

	// inline asm
	// inline asm
	call (%rd126), _rt_buffer_get_64, (%rd121, %r24, %r151, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	add.f32 	%f823, %f118, %f820;
	add.f32 	%f824, %f118, %f821;
	add.f32 	%f825, %f118, %f822;
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f825;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f824;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs81, %f823;}

	// inline asm
	st.v4.u16 	[%rd126], {%rs81, %rs82, %rs83, %rs77};
	bra.uni 	BB0_135;

BB0_94:
	mov.u64 	%rd139, image_RNM3;
	cvta.global.u64 	%rd134, %rd139;
	mov.u32 	%r153, 8;
	// inline asm
	call (%rd133), _rt_buffer_get_64, (%rd134, %r24, %r153, %rd4, %rd5, %rd15, %rd15);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs88, %f118;}

	// inline asm
	st.v4.u16 	[%rd133], {%rs88, %rs88, %rs88, %rs77};

BB0_135:
	ret;
}


