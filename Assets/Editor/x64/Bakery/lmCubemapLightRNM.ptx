//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_30
.address_size 64

	// .globl	_Z6oxMainv
.global .align 8 .b8 pixelID[8];
.global .align 8 .b8 resolution[8];
.global .align 4 .b8 normal[12];
.global .align 4 .b8 camPos[12];
.global .align 4 .b8 root[4];
.global .align 4 .u32 imageEnabled;
.global .texref lightmap;
.global .align 16 .b8 tileInfo[16];
.global .align 4 .u32 additive;
.global .align 1 .b8 image[1];
.global .align 1 .b8 image_HDR[1];
.global .align 1 .b8 image_HDR2[1];
.global .align 1 .b8 image_Mask[1];
.global .align 1 .b8 image_RNM0[1];
.global .align 1 .b8 image_RNM1[1];
.global .align 1 .b8 image_RNM2[1];
.global .align 1 .b8 uvtangent[1];
.global .align 1 .b8 uvpos[1];
.global .align 1 .b8 uvnormal[1];
.global .align 4 .u32 samples;
.global .align 4 .f32 lightInvCutoff;
.global .align 4 .f32 lightRadius;
.global .align 4 .b8 lightPos[12];
.global .align 4 .b8 lightColor[12];
.global .align 4 .u32 ignoreNormal;
.global .align 4 .u32 lightCubemap;
.global .align 4 .b8 lightMatrix[36];
.global .align 4 .f32 lightFalloffFakeDistanceMult;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7pixelIDE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10resolutionE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6normalE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6camPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12imageEnabledE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tileInfoE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8additiveE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7samplesE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14lightInvCutoffE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightRadiusE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8lightPosE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10lightColorE[8] = {82, 97, 121, 0, 12, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12ignoreNormalE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12lightCubemapE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11lightMatrixE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo28lightFalloffFakeDistanceMultE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 8 .b8 _ZN21rti_internal_typename7pixelIDE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10resolutionE[6] = {117, 105, 110, 116, 50, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6normalE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename6camPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12imageEnabledE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tileInfoE[6] = {117, 105, 110, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8additiveE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7samplesE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename14lightInvCutoffE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename11lightRadiusE[6] = {102, 108, 111, 97, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8lightPosE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename10lightColorE[7] = {102, 108, 111, 97, 116, 51, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12ignoreNormalE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12lightCubemapE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename11lightMatrixE[10] = {77, 97, 116, 114, 105, 120, 51, 120, 51, 0};
.global .align 8 .b8 _ZN21rti_internal_typename28lightFalloffFakeDistanceMultE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7pixelIDE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10resolutionE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6normalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6camPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12imageEnabledE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tileInfoE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8additiveE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7samplesE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14lightInvCutoffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightRadiusE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8lightPosE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10lightColorE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12ignoreNormalE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12lightCubemapE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11lightMatrixE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum28lightFalloffFakeDistanceMultE = 4919;
.global .align 16 .b8 _ZN21rti_internal_semantic7pixelIDE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic10resolutionE[12] = {114, 116, 76, 97, 117, 110, 99, 104, 68, 105, 109, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic6normalE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 110, 111, 114, 109, 97, 108, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6camPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12imageEnabledE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tileInfoE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8additiveE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic7samplesE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic14lightInvCutoffE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightRadiusE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8lightPosE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic10lightColorE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12ignoreNormalE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic12lightCubemapE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11lightMatrixE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic28lightFalloffFakeDistanceMultE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7pixelIDE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10resolutionE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6normalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6camPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12imageEnabledE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tileInfoE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8additiveE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7samplesE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14lightInvCutoffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightRadiusE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8lightPosE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10lightColorE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12ignoreNormalE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12lightCubemapE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11lightMatrixE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation28lightFalloffFakeDistanceMultE[1];

.visible .entry _Z6oxMainv(

)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<127>;
	.reg .b16 	%rs<213>;
	.reg .f32 	%f<1064>;
	.reg .b32 	%r<246>;
	.reg .b64 	%rd<334>;


	mov.u64 	%rd333, __local_depot0;
	cvta.local.u64 	%SP, %rd333;
	ld.global.v2.u32 	{%r33, %r34}, [pixelID];
	cvt.u64.u32	%rd16, %r33;
	cvt.u64.u32	%rd17, %r34;
	mov.u64 	%rd20, uvnormal;
	cvta.global.u64 	%rd15, %rd20;
	mov.u32 	%r31, 2;
	mov.u32 	%r32, 4;
	mov.u64 	%rd19, 0;
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd15, %r31, %r32, %rd16, %rd17, %rd19, %rd19);
	// inline asm
	ld.u32 	%r1, [%rd14];
	shr.u32 	%r37, %r1, 16;
	cvt.u16.u32	%rs1, %r37;
	and.b16  	%rs10, %rs1, 255;
	cvt.u16.u32	%rs11, %r1;
	or.b16  	%rs12, %rs11, %rs10;
	setp.eq.s16	%p6, %rs12, 0;
	mov.f32 	%f1034, 0f00000000;
	mov.f32 	%f1035, %f1034;
	mov.f32 	%f1036, %f1034;
	@%p6 bra 	BB0_2;

	ld.u8 	%rs13, [%rd14+1];
	and.b16  	%rs15, %rs11, 255;
	cvt.rn.f32.u16	%f139, %rs15;
	div.rn.f32 	%f140, %f139, 0f437F0000;
	fma.rn.f32 	%f141, %f140, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f142, %rs13;
	div.rn.f32 	%f143, %f142, 0f437F0000;
	fma.rn.f32 	%f144, %f143, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f145, %rs10;
	div.rn.f32 	%f146, %f145, 0f437F0000;
	fma.rn.f32 	%f147, %f146, 0f40000000, 0fBF800000;
	mul.f32 	%f148, %f144, %f144;
	fma.rn.f32 	%f149, %f141, %f141, %f148;
	fma.rn.f32 	%f150, %f147, %f147, %f149;
	sqrt.rn.f32 	%f151, %f150;
	rcp.rn.f32 	%f152, %f151;
	mul.f32 	%f1034, %f141, %f152;
	mul.f32 	%f1035, %f144, %f152;
	mul.f32 	%f1036, %f147, %f152;

BB0_2:
	ld.global.v2.u32 	{%r38, %r39}, [pixelID];
	ld.global.v2.u32 	{%r41, %r42}, [tileInfo];
	add.s32 	%r2, %r38, %r41;
	add.s32 	%r3, %r39, %r42;
	setp.eq.f32	%p7, %f1035, 0f00000000;
	setp.eq.f32	%p8, %f1034, 0f00000000;
	and.pred  	%p9, %p8, %p7;
	setp.eq.f32	%p10, %f1036, 0f00000000;
	and.pred  	%p11, %p9, %p10;
	@%p11 bra 	BB0_104;
	bra.uni 	BB0_3;

BB0_104:
	ld.global.u32 	%r245, [imageEnabled];
	and.b32  	%r198, %r245, 1;
	setp.eq.b32	%p120, %r198, 1;
	@!%p120 bra 	BB0_106;
	bra.uni 	BB0_105;

BB0_105:
	cvt.u64.u32	%rd241, %r2;
	cvt.u64.u32	%rd242, %r3;
	mov.u64 	%rd245, image;
	cvta.global.u64 	%rd240, %rd245;
	// inline asm
	call (%rd239), _rt_buffer_get_64, (%rd240, %r31, %r32, %rd241, %rd242, %rd19, %rd19);
	// inline asm
	mov.u16 	%rs158, 0;
	st.v4.u8 	[%rd239], {%rs158, %rs158, %rs158, %rs158};
	ld.global.u32 	%r245, [imageEnabled];

BB0_106:
	and.b32  	%r201, %r245, 8;
	setp.eq.s32	%p121, %r201, 0;
	@%p121 bra 	BB0_108;

	cvt.u64.u32	%rd249, %r3;
	cvt.u64.u32	%rd248, %r2;
	mov.u64 	%rd252, image_Mask;
	cvta.global.u64 	%rd247, %rd252;
	// inline asm
	call (%rd246), _rt_buffer_get_64, (%rd247, %r31, %r31, %rd248, %rd249, %rd19, %rd19);
	// inline asm
	mov.f32 	%f938, 0f00000000;
	cvt.rzi.u32.f32	%r204, %f938;
	cvt.u16.u32	%rs159, %r204;
	mov.u16 	%rs160, 0;
	st.v2.u8 	[%rd246], {%rs159, %rs160};
	ld.global.u32 	%r245, [imageEnabled];

BB0_108:
	cvt.u64.u32	%rd12, %r2;
	cvt.u64.u32	%rd13, %r3;
	and.b32  	%r205, %r245, 4;
	setp.eq.s32	%p122, %r205, 0;
	@%p122 bra 	BB0_112;

	ld.global.u32 	%r206, [additive];
	setp.eq.s32	%p123, %r206, 0;
	@%p123 bra 	BB0_111;

	mov.u64 	%rd265, image_HDR;
	cvta.global.u64 	%rd254, %rd265;
	mov.u32 	%r210, 8;
	// inline asm
	call (%rd253), _rt_buffer_get_64, (%rd254, %r31, %r210, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs167, %rs168, %rs169, %rs170}, [%rd253];
	// inline asm
	{  cvt.f32.f16 %f939, %rs167;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f940, %rs168;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f941, %rs169;}

	// inline asm
	// inline asm
	call (%rd259), _rt_buffer_get_64, (%rd254, %r31, %r210, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	add.f32 	%f942, %f939, 0f00000000;
	add.f32 	%f943, %f940, 0f00000000;
	add.f32 	%f944, %f941, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs166, %f944;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs165, %f943;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs164, %f942;}

	// inline asm
	mov.u16 	%rs171, 0;
	st.v4.u16 	[%rd259], {%rs164, %rs165, %rs166, %rs171};
	bra.uni 	BB0_112;

BB0_3:
	ld.global.v2.u32 	{%r48, %r49}, [pixelID];
	cvt.u64.u32	%rd23, %r48;
	cvt.u64.u32	%rd24, %r49;
	mov.u64 	%rd27, uvpos;
	cvta.global.u64 	%rd22, %rd27;
	mov.u32 	%r47, 12;
	// inline asm
	call (%rd21), _rt_buffer_get_64, (%rd22, %r31, %r47, %rd23, %rd24, %rd19, %rd19);
	// inline asm
	ld.global.f32 	%f155, [lightPos];
	ld.f32 	%f9, [%rd21+8];
	ld.f32 	%f8, [%rd21+4];
	ld.f32 	%f7, [%rd21];
	sub.f32 	%f156, %f155, %f7;
	ld.global.f32 	%f157, [lightPos+4];
	sub.f32 	%f158, %f157, %f8;
	ld.global.f32 	%f159, [lightPos+8];
	sub.f32 	%f160, %f159, %f9;
	mul.f32 	%f161, %f158, %f158;
	fma.rn.f32 	%f162, %f156, %f156, %f161;
	fma.rn.f32 	%f163, %f160, %f160, %f162;
	sqrt.rn.f32 	%f164, %f163;
	rcp.rn.f32 	%f165, %f164;
	mul.f32 	%f10, %f156, %f165;
	mul.f32 	%f11, %f158, %f165;
	mul.f32 	%f12, %f160, %f165;
	ld.global.f32 	%f166, [lightFalloffFakeDistanceMult];
	mul.f32 	%f13, %f164, %f166;
	ld.global.f32 	%f167, [lightInvCutoff];
	mul.f32 	%f14, %f164, %f167;
	mov.f32 	%f171, 0f40800000;
	abs.f32 	%f16, %f14;
	setp.lt.f32	%p12, %f16, 0f00800000;
	mul.f32 	%f173, %f16, 0f4B800000;
	selp.f32	%f174, 0fC3170000, 0fC2FE0000, %p12;
	selp.f32	%f175, %f173, %f16, %p12;
	mov.b32 	 %r52, %f175;
	and.b32  	%r53, %r52, 8388607;
	or.b32  	%r54, %r53, 1065353216;
	mov.b32 	 %f176, %r54;
	shr.u32 	%r55, %r52, 23;
	cvt.rn.f32.u32	%f177, %r55;
	add.f32 	%f178, %f174, %f177;
	setp.gt.f32	%p13, %f176, 0f3FB504F3;
	mul.f32 	%f179, %f176, 0f3F000000;
	add.f32 	%f180, %f178, 0f3F800000;
	selp.f32	%f181, %f179, %f176, %p13;
	selp.f32	%f182, %f180, %f178, %p13;
	add.f32 	%f183, %f181, 0fBF800000;
	add.f32 	%f154, %f181, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f153,%f154;
	// inline asm
	add.f32 	%f184, %f183, %f183;
	mul.f32 	%f185, %f153, %f184;
	mul.f32 	%f186, %f185, %f185;
	mov.f32 	%f187, 0f3C4CAF63;
	mov.f32 	%f188, 0f3B18F0FE;
	fma.rn.f32 	%f189, %f188, %f186, %f187;
	mov.f32 	%f190, 0f3DAAAABD;
	fma.rn.f32 	%f191, %f189, %f186, %f190;
	mul.rn.f32 	%f192, %f191, %f186;
	mul.rn.f32 	%f193, %f192, %f185;
	sub.f32 	%f194, %f183, %f185;
	neg.f32 	%f195, %f185;
	add.f32 	%f196, %f194, %f194;
	fma.rn.f32 	%f197, %f195, %f183, %f196;
	mul.rn.f32 	%f198, %f153, %f197;
	add.f32 	%f199, %f193, %f185;
	sub.f32 	%f200, %f185, %f199;
	add.f32 	%f201, %f193, %f200;
	add.f32 	%f202, %f198, %f201;
	add.f32 	%f203, %f199, %f202;
	sub.f32 	%f204, %f199, %f203;
	add.f32 	%f205, %f202, %f204;
	mov.f32 	%f206, 0f3F317200;
	mul.rn.f32 	%f207, %f182, %f206;
	mov.f32 	%f208, 0f35BFBE8E;
	mul.rn.f32 	%f209, %f182, %f208;
	add.f32 	%f210, %f207, %f203;
	sub.f32 	%f211, %f207, %f210;
	add.f32 	%f212, %f203, %f211;
	add.f32 	%f213, %f205, %f212;
	add.f32 	%f214, %f209, %f213;
	add.f32 	%f215, %f210, %f214;
	sub.f32 	%f216, %f210, %f215;
	add.f32 	%f217, %f214, %f216;
	mul.rn.f32 	%f218, %f171, %f215;
	neg.f32 	%f219, %f218;
	fma.rn.f32 	%f220, %f171, %f215, %f219;
	fma.rn.f32 	%f221, %f171, %f217, %f220;
	mov.f32 	%f222, 0f00000000;
	fma.rn.f32 	%f223, %f222, %f215, %f221;
	add.rn.f32 	%f224, %f218, %f223;
	neg.f32 	%f225, %f224;
	add.rn.f32 	%f226, %f218, %f225;
	add.rn.f32 	%f227, %f226, %f223;
	mov.b32 	 %r56, %f224;
	setp.eq.s32	%p14, %r56, 1118925336;
	add.s32 	%r57, %r56, -1;
	mov.b32 	 %f228, %r57;
	add.f32 	%f229, %f227, 0f37000000;
	selp.f32	%f230, %f228, %f224, %p14;
	selp.f32	%f17, %f229, %f227, %p14;
	mul.f32 	%f231, %f230, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f232, %f231;
	mov.f32 	%f233, 0fBF317200;
	fma.rn.f32 	%f234, %f232, %f233, %f230;
	mov.f32 	%f235, 0fB5BFBE8E;
	fma.rn.f32 	%f236, %f232, %f235, %f234;
	mul.f32 	%f237, %f236, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f238, %f237;
	add.f32 	%f239, %f232, 0f00000000;
	ex2.approx.f32 	%f240, %f239;
	mul.f32 	%f241, %f238, %f240;
	setp.lt.f32	%p15, %f230, 0fC2D20000;
	selp.f32	%f242, 0f00000000, %f241, %p15;
	setp.gt.f32	%p16, %f230, 0f42D20000;
	selp.f32	%f1037, 0f7F800000, %f242, %p16;
	setp.eq.f32	%p17, %f1037, 0f7F800000;
	@%p17 bra 	BB0_5;

	fma.rn.f32 	%f1037, %f1037, %f17, %f1037;

BB0_5:
	mov.f32 	%f972, 0f40000000;
	cvt.rzi.f32.f32	%f971, %f972;
	add.f32 	%f970, %f971, %f971;
	mov.f32 	%f969, 0f40800000;
	sub.f32 	%f968, %f969, %f970;
	abs.f32 	%f967, %f968;
	setp.lt.f32	%p18, %f14, 0f00000000;
	setp.eq.f32	%p19, %f967, 0f3F800000;
	and.pred  	%p1, %p18, %p19;
	mov.b32 	 %r58, %f1037;
	xor.b32  	%r59, %r58, -2147483648;
	mov.b32 	 %f243, %r59;
	selp.f32	%f1039, %f243, %f1037, %p1;
	setp.eq.f32	%p20, %f14, 0f00000000;
	@%p20 bra 	BB0_8;
	bra.uni 	BB0_6;

BB0_8:
	add.f32 	%f246, %f14, %f14;
	selp.f32	%f1039, %f246, 0f00000000, %p19;
	bra.uni 	BB0_9;

BB0_6:
	setp.geu.f32	%p21, %f14, 0f00000000;
	@%p21 bra 	BB0_9;

	mov.f32 	%f1005, 0f40800000;
	cvt.rzi.f32.f32	%f245, %f1005;
	setp.neu.f32	%p22, %f245, 0f40800000;
	selp.f32	%f1039, 0f7FFFFFFF, %f1039, %p22;

BB0_9:
	abs.f32 	%f973, %f14;
	add.f32 	%f247, %f973, 0f40800000;
	mov.b32 	 %r60, %f247;
	setp.lt.s32	%p24, %r60, 2139095040;
	@%p24 bra 	BB0_14;

	abs.f32 	%f1003, %f14;
	setp.gtu.f32	%p25, %f1003, 0f7F800000;
	@%p25 bra 	BB0_13;
	bra.uni 	BB0_11;

BB0_13:
	add.f32 	%f1039, %f14, 0f40800000;
	bra.uni 	BB0_14;

BB0_11:
	abs.f32 	%f1004, %f14;
	setp.neu.f32	%p26, %f1004, 0f7F800000;
	@%p26 bra 	BB0_14;

	selp.f32	%f1039, 0fFF800000, 0f7F800000, %p1;

BB0_14:
	mov.f32 	%f1042, 0f3F800000;
	sub.f32 	%f256, %f1042, %f1039;
	setp.eq.f32	%p27, %f14, 0f3F800000;
	selp.f32	%f257, 0f00000000, %f256, %p27;
	cvt.sat.f32.f32	%f258, %f257;
	fma.rn.f32 	%f259, %f13, %f13, 0f3F800000;
	div.rn.f32 	%f28, %f258, %f259;
	mul.f32 	%f260, %f1035, %f11;
	fma.rn.f32 	%f261, %f1034, %f10, %f260;
	fma.rn.f32 	%f29, %f1036, %f12, %f261;
	ld.global.u32 	%r4, [ignoreNormal];
	ld.global.f32 	%f262, [lightMatrix];
	fma.rn.f32 	%f263, %f262, %f10, 0f00000000;
	ld.global.f32 	%f264, [lightMatrix+4];
	fma.rn.f32 	%f265, %f264, %f11, %f263;
	ld.global.f32 	%f266, [lightMatrix+8];
	fma.rn.f32 	%f254, %f266, %f12, %f265;
	ld.global.f32 	%f267, [lightMatrix+12];
	fma.rn.f32 	%f268, %f267, %f10, 0f00000000;
	ld.global.f32 	%f269, [lightMatrix+16];
	fma.rn.f32 	%f270, %f269, %f11, %f268;
	ld.global.f32 	%f271, [lightMatrix+20];
	fma.rn.f32 	%f253, %f271, %f12, %f270;
	ld.global.f32 	%f272, [lightMatrix+24];
	fma.rn.f32 	%f273, %f272, %f10, 0f00000000;
	ld.global.f32 	%f274, [lightMatrix+28];
	fma.rn.f32 	%f275, %f274, %f11, %f273;
	ld.global.f32 	%f276, [lightMatrix+32];
	fma.rn.f32 	%f252, %f276, %f12, %f275;
	ld.global.u32 	%r61, [lightCubemap];
	mov.u32 	%r62, 6;
	mov.u32 	%r238, 0;
	// inline asm
	call (%f248, %f249, %f250, %f251), _rt_texture_get_base_id, (%r61, %r62, %f252, %f253, %f254, %r238);
	// inline asm
	max.f32 	%f277, %f248, %f249;
	max.f32 	%f278, %f277, %f250;
	mul.f32 	%f279, %f28, %f278;
	setp.lt.f32	%p28, %f279, 0f3727C5AC;
	@%p28 bra 	BB0_87;
	bra.uni 	BB0_15;

BB0_87:
	ld.global.u32 	%r243, [imageEnabled];
	and.b32  	%r162, %r243, 1;
	setp.eq.b32	%p113, %r162, 1;
	@!%p113 bra 	BB0_89;
	bra.uni 	BB0_88;

BB0_88:
	cvt.u64.u32	%rd147, %r2;
	cvt.u64.u32	%rd148, %r3;
	mov.u64 	%rd151, image;
	cvta.global.u64 	%rd146, %rd151;
	// inline asm
	call (%rd145), _rt_buffer_get_64, (%rd146, %r31, %r32, %rd147, %rd148, %rd19, %rd19);
	// inline asm
	mov.u16 	%rs106, 1;
	mov.u16 	%rs107, 0;
	st.v4.u8 	[%rd145], {%rs107, %rs107, %rs107, %rs106};
	ld.global.u32 	%r243, [imageEnabled];

BB0_89:
	and.b32  	%r165, %r243, 8;
	setp.eq.s32	%p114, %r165, 0;
	@%p114 bra 	BB0_91;

	cvt.u64.u32	%rd155, %r3;
	cvt.u64.u32	%rd154, %r2;
	mov.u64 	%rd158, image_Mask;
	cvta.global.u64 	%rd153, %rd158;
	// inline asm
	call (%rd152), _rt_buffer_get_64, (%rd153, %r31, %r31, %rd154, %rd155, %rd19, %rd19);
	// inline asm
	mov.f32 	%f903, 0f00000000;
	cvt.rzi.u32.f32	%r168, %f903;
	cvt.u16.u32	%rs108, %r168;
	mov.u16 	%rs109, 255;
	st.v2.u8 	[%rd152], {%rs108, %rs109};
	ld.global.u32 	%r243, [imageEnabled];

BB0_91:
	cvt.u64.u32	%rd10, %r2;
	cvt.u64.u32	%rd11, %r3;
	and.b32  	%r169, %r243, 4;
	setp.eq.s32	%p115, %r169, 0;
	@%p115 bra 	BB0_95;

	ld.global.u32 	%r170, [additive];
	setp.eq.s32	%p116, %r170, 0;
	mov.f32 	%f904, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs110, %f904;}

	// inline asm
	@%p116 bra 	BB0_94;

	mov.u64 	%rd171, image_HDR;
	cvta.global.u64 	%rd160, %rd171;
	mov.u32 	%r174, 8;
	// inline asm
	call (%rd159), _rt_buffer_get_64, (%rd160, %r31, %r174, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs117, %rs118, %rs119, %rs120}, [%rd159];
	// inline asm
	{  cvt.f32.f16 %f905, %rs117;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f906, %rs118;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f907, %rs119;}

	// inline asm
	// inline asm
	call (%rd165), _rt_buffer_get_64, (%rd160, %r31, %r174, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	add.f32 	%f908, %f905, 0f00000000;
	add.f32 	%f909, %f906, 0f00000000;
	add.f32 	%f910, %f907, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs116, %f910;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs115, %f909;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs114, %f908;}

	// inline asm
	st.v4.u16 	[%rd165], {%rs114, %rs115, %rs116, %rs110};
	bra.uni 	BB0_95;

BB0_15:
	mov.f32 	%f1041, 0f00000000;
	mul.f32 	%f281, %f7, 0f3456BF95;
	abs.f32 	%f282, %f1034;
	div.rn.f32 	%f283, %f281, %f282;
	abs.f32 	%f284, %f1035;
	mul.f32 	%f285, %f8, 0f3456BF95;
	div.rn.f32 	%f286, %f285, %f284;
	abs.f32 	%f287, %f1036;
	mul.f32 	%f288, %f9, 0f3456BF95;
	div.rn.f32 	%f289, %f288, %f287;
	abs.f32 	%f290, %f283;
	abs.f32 	%f291, %f286;
	abs.f32 	%f292, %f289;
	mov.f32 	%f293, 0f38D1B717;
	max.f32 	%f294, %f290, %f293;
	max.f32 	%f295, %f291, %f293;
	max.f32 	%f296, %f292, %f293;
	fma.rn.f32 	%f33, %f1034, %f294, %f7;
	fma.rn.f32 	%f34, %f1035, %f295, %f8;
	fma.rn.f32 	%f35, %f1036, %f296, %f9;
	ld.global.u32 	%r239, [samples];
	setp.lt.s32	%p29, %r239, 1;
	@%p29 bra 	BB0_18;

	mul.f32 	%f298, %f33, 0f3456BF95;
	abs.f32 	%f299, %f298;
	mul.f32 	%f300, %f34, 0f3456BF95;
	abs.f32 	%f301, %f300;
	mul.f32 	%f302, %f35, 0f3456BF95;
	abs.f32 	%f303, %f302;
	max.f32 	%f304, %f299, %f301;
	max.f32 	%f305, %f304, %f303;
	max.f32 	%f36, %f305, %f293;
	mov.f32 	%f1041, 0f00000000;

BB0_17:
	add.u64 	%rd28, %SP, 0;
	cvta.to.local.u64 	%rd29, %rd28;
	cvt.rn.f32.s32	%f315, %r238;
	mul.f32 	%f316, %f315, 0f3DD32618;
	cvt.rmi.f32.f32	%f317, %f316;
	sub.f32 	%f318, %f316, %f317;
	mul.f32 	%f319, %f315, 0f3DD2F1AA;
	cvt.rmi.f32.f32	%f320, %f319;
	sub.f32 	%f321, %f319, %f320;
	mul.f32 	%f322, %f315, 0f3DC74539;
	cvt.rmi.f32.f32	%f323, %f322;
	sub.f32 	%f324, %f322, %f323;
	add.f32 	%f325, %f321, 0f4199851F;
	add.f32 	%f326, %f324, 0f4199851F;
	add.f32 	%f327, %f318, 0f4199851F;
	mul.f32 	%f328, %f321, %f326;
	fma.rn.f32 	%f329, %f318, %f325, %f328;
	fma.rn.f32 	%f330, %f327, %f324, %f329;
	add.f32 	%f331, %f318, %f330;
	add.f32 	%f332, %f321, %f330;
	add.f32 	%f333, %f324, %f330;
	add.f32 	%f334, %f331, %f332;
	mul.f32 	%f335, %f333, %f334;
	cvt.rmi.f32.f32	%f336, %f335;
	sub.f32 	%f337, %f335, %f336;
	add.f32 	%f338, %f331, %f333;
	mul.f32 	%f339, %f332, %f338;
	cvt.rmi.f32.f32	%f340, %f339;
	sub.f32 	%f341, %f339, %f340;
	add.f32 	%f342, %f332, %f333;
	mul.f32 	%f343, %f331, %f342;
	cvt.rmi.f32.f32	%f344, %f343;
	sub.f32 	%f345, %f343, %f344;
	fma.rn.f32 	%f346, %f337, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f347, %f341, 0f40000000, 0fBF800000;
	fma.rn.f32 	%f348, %f345, 0f40000000, 0fBF800000;
	ld.global.f32 	%f349, [lightRadius];
	ld.global.f32 	%f350, [lightPos];
	fma.rn.f32 	%f351, %f349, %f346, %f350;
	ld.global.f32 	%f352, [lightPos+4];
	fma.rn.f32 	%f353, %f349, %f347, %f352;
	ld.global.f32 	%f354, [lightPos+8];
	fma.rn.f32 	%f355, %f349, %f348, %f354;
	sub.f32 	%f356, %f351, %f7;
	sub.f32 	%f357, %f353, %f8;
	sub.f32 	%f358, %f355, %f9;
	mul.f32 	%f359, %f357, %f357;
	fma.rn.f32 	%f360, %f356, %f356, %f359;
	fma.rn.f32 	%f361, %f358, %f358, %f360;
	sqrt.rn.f32 	%f314, %f361;
	rcp.rn.f32 	%f362, %f314;
	mul.f32 	%f310, %f362, %f356;
	mul.f32 	%f311, %f362, %f357;
	mul.f32 	%f312, %f362, %f358;
	mov.u32 	%r68, 1065353216;
	st.local.u32 	[%rd29], %r68;
	ld.global.u32 	%r65, [root];
	mov.u32 	%r66, 1;
	// inline asm
	call _rt_trace_64, (%r65, %f33, %f34, %f35, %f310, %f311, %f312, %r66, %f36, %f314, %rd28, %r32);
	// inline asm
	ld.local.f32 	%f363, [%rd29];
	add.f32 	%f1041, %f1041, %f363;
	ld.global.u32 	%r239, [samples];
	add.s32 	%r238, %r238, 1;
	setp.lt.s32	%p30, %r238, %r239;
	@%p30 bra 	BB0_17;

BB0_18:
	setp.eq.s32	%p31, %r239, 0;
	@%p31 bra 	BB0_20;

	cvt.rn.f32.s32	%f365, %r239;
	div.rn.f32 	%f1042, %f1041, %f365;

BB0_20:
	setp.eq.s32	%p32, %r4, 0;
	selp.f32	%f366, %f29, 0f3F800000, %p32;
	cvt.sat.f32.f32	%f367, %f366;
	mul.f32 	%f368, %f28, %f367;
	mul.f32 	%f369, %f1042, %f368;
	ld.global.f32 	%f370, [lightColor];
	mul.f32 	%f371, %f370, %f369;
	ld.global.f32 	%f372, [lightColor+4];
	mul.f32 	%f373, %f372, %f369;
	ld.global.f32 	%f374, [lightColor+8];
	mul.f32 	%f375, %f369, %f374;
	mul.f32 	%f42, %f248, %f371;
	mul.f32 	%f43, %f249, %f373;
	mul.f32 	%f44, %f250, %f375;
	ld.global.u32 	%r241, [imageEnabled];
	and.b32  	%r69, %r241, 8;
	setp.eq.s32	%p33, %r69, 0;
	@%p33 bra 	BB0_33;

	mov.f32 	%f981, 0fB5BFBE8E;
	mov.f32 	%f980, 0fBF317200;
	mov.f32 	%f979, 0f35BFBE8E;
	mov.f32 	%f978, 0f3F317200;
	mov.f32 	%f977, 0f3DAAAABD;
	mov.f32 	%f976, 0f3C4CAF63;
	mov.f32 	%f975, 0f3B18F0FE;
	cvt.u64.u32	%rd32, %r2;
	cvt.u64.u32	%rd33, %r3;
	mov.u64 	%rd36, image_Mask;
	cvta.global.u64 	%rd31, %rd36;
	// inline asm
	call (%rd30), _rt_buffer_get_64, (%rd31, %r31, %r31, %rd32, %rd33, %rd19, %rd19);
	// inline asm
	abs.f32 	%f46, %f1042;
	setp.lt.f32	%p34, %f46, 0f00800000;
	mul.f32 	%f381, %f46, 0f4B800000;
	selp.f32	%f382, 0fC3170000, 0fC2FE0000, %p34;
	selp.f32	%f383, %f381, %f46, %p34;
	mov.b32 	 %r72, %f383;
	and.b32  	%r73, %r72, 8388607;
	or.b32  	%r74, %r73, 1065353216;
	mov.b32 	 %f384, %r74;
	shr.u32 	%r75, %r72, 23;
	cvt.rn.f32.u32	%f385, %r75;
	add.f32 	%f386, %f382, %f385;
	setp.gt.f32	%p35, %f384, 0f3FB504F3;
	mul.f32 	%f387, %f384, 0f3F000000;
	add.f32 	%f388, %f386, 0f3F800000;
	selp.f32	%f389, %f387, %f384, %p35;
	selp.f32	%f390, %f388, %f386, %p35;
	add.f32 	%f391, %f389, 0fBF800000;
	add.f32 	%f377, %f389, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f376,%f377;
	// inline asm
	add.f32 	%f392, %f391, %f391;
	mul.f32 	%f393, %f376, %f392;
	mul.f32 	%f394, %f393, %f393;
	fma.rn.f32 	%f397, %f975, %f394, %f976;
	fma.rn.f32 	%f399, %f397, %f394, %f977;
	mul.rn.f32 	%f400, %f399, %f394;
	mul.rn.f32 	%f401, %f400, %f393;
	sub.f32 	%f402, %f391, %f393;
	neg.f32 	%f403, %f393;
	add.f32 	%f404, %f402, %f402;
	fma.rn.f32 	%f405, %f403, %f391, %f404;
	mul.rn.f32 	%f406, %f376, %f405;
	add.f32 	%f407, %f401, %f393;
	sub.f32 	%f408, %f393, %f407;
	add.f32 	%f409, %f401, %f408;
	add.f32 	%f410, %f406, %f409;
	add.f32 	%f411, %f407, %f410;
	sub.f32 	%f412, %f407, %f411;
	add.f32 	%f413, %f410, %f412;
	mul.rn.f32 	%f415, %f390, %f978;
	mul.rn.f32 	%f417, %f390, %f979;
	add.f32 	%f418, %f415, %f411;
	sub.f32 	%f419, %f415, %f418;
	add.f32 	%f420, %f411, %f419;
	add.f32 	%f421, %f413, %f420;
	add.f32 	%f422, %f417, %f421;
	add.f32 	%f423, %f418, %f422;
	sub.f32 	%f424, %f418, %f423;
	add.f32 	%f425, %f422, %f424;
	mov.f32 	%f426, 0f3EE8BA2E;
	mul.rn.f32 	%f427, %f426, %f423;
	neg.f32 	%f428, %f427;
	fma.rn.f32 	%f429, %f426, %f423, %f428;
	fma.rn.f32 	%f430, %f426, %f425, %f429;
	mov.f32 	%f431, 0f00000000;
	fma.rn.f32 	%f432, %f431, %f423, %f430;
	add.rn.f32 	%f433, %f427, %f432;
	neg.f32 	%f434, %f433;
	add.rn.f32 	%f435, %f427, %f434;
	add.rn.f32 	%f436, %f435, %f432;
	mov.b32 	 %r76, %f433;
	setp.eq.s32	%p36, %r76, 1118925336;
	add.s32 	%r77, %r76, -1;
	mov.b32 	 %f437, %r77;
	add.f32 	%f438, %f436, 0f37000000;
	selp.f32	%f439, %f437, %f433, %p36;
	selp.f32	%f47, %f438, %f436, %p36;
	mul.f32 	%f440, %f439, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f441, %f440;
	fma.rn.f32 	%f443, %f441, %f980, %f439;
	fma.rn.f32 	%f445, %f441, %f981, %f443;
	mul.f32 	%f446, %f445, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f447, %f446;
	add.f32 	%f448, %f441, 0f00000000;
	ex2.approx.f32 	%f449, %f448;
	mul.f32 	%f450, %f447, %f449;
	setp.lt.f32	%p37, %f439, 0fC2D20000;
	selp.f32	%f451, 0f00000000, %f450, %p37;
	setp.gt.f32	%p38, %f439, 0f42D20000;
	selp.f32	%f1043, 0f7F800000, %f451, %p38;
	setp.eq.f32	%p39, %f1043, 0f7F800000;
	@%p39 bra 	BB0_23;

	fma.rn.f32 	%f1043, %f1043, %f47, %f1043;

BB0_23:
	mov.f32 	%f1009, 0f3E68BA2E;
	cvt.rzi.f32.f32	%f1008, %f1009;
	fma.rn.f32 	%f1007, %f1008, 0fC0000000, 0f3EE8BA2E;
	abs.f32 	%f1006, %f1007;
	setp.lt.f32	%p40, %f1042, 0f00000000;
	setp.eq.f32	%p41, %f1006, 0f3F800000;
	and.pred  	%p2, %p40, %p41;
	mov.b32 	 %r78, %f1043;
	xor.b32  	%r79, %r78, -2147483648;
	mov.b32 	 %f452, %r79;
	selp.f32	%f1045, %f452, %f1043, %p2;
	setp.eq.f32	%p42, %f1042, 0f00000000;
	@%p42 bra 	BB0_26;
	bra.uni 	BB0_24;

BB0_26:
	add.f32 	%f455, %f1042, %f1042;
	selp.f32	%f1045, %f455, 0f00000000, %p41;
	bra.uni 	BB0_27;

BB0_111:
	mov.u64 	%rd272, image_HDR;
	cvta.global.u64 	%rd267, %rd272;
	mov.u32 	%r212, 8;
	// inline asm
	call (%rd266), _rt_buffer_get_64, (%rd267, %r31, %r212, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	mov.f32 	%f945, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs172, %f945;}

	// inline asm
	mov.u16 	%rs173, 0;
	st.v4.u16 	[%rd266], {%rs172, %rs172, %rs172, %rs173};

BB0_112:
	ld.global.u32 	%r213, [additive];
	setp.eq.s32	%p124, %r213, 0;
	@%p124 bra 	BB0_114;

	mov.u64 	%rd285, image_RNM0;
	cvta.global.u64 	%rd274, %rd285;
	mov.u32 	%r217, 8;
	// inline asm
	call (%rd273), _rt_buffer_get_64, (%rd274, %r31, %r217, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs180, %rs181, %rs182, %rs183}, [%rd273];
	// inline asm
	{  cvt.f32.f16 %f946, %rs180;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f947, %rs181;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f948, %rs182;}

	// inline asm
	// inline asm
	call (%rd279), _rt_buffer_get_64, (%rd274, %r31, %r217, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	add.f32 	%f949, %f946, 0f00000000;
	add.f32 	%f950, %f947, 0f00000000;
	add.f32 	%f951, %f948, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs179, %f951;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs178, %f950;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs177, %f949;}

	// inline asm
	mov.u16 	%rs184, 0;
	st.v4.u16 	[%rd279], {%rs177, %rs178, %rs179, %rs184};
	bra.uni 	BB0_115;

BB0_114:
	mov.u64 	%rd292, image_RNM0;
	cvta.global.u64 	%rd287, %rd292;
	mov.u32 	%r219, 8;
	// inline asm
	call (%rd286), _rt_buffer_get_64, (%rd287, %r31, %r219, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	mov.f32 	%f952, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs185, %f952;}

	// inline asm
	mov.u16 	%rs186, 0;
	st.v4.u16 	[%rd286], {%rs185, %rs185, %rs185, %rs186};

BB0_115:
	ld.global.u32 	%r220, [additive];
	setp.eq.s32	%p125, %r220, 0;
	@%p125 bra 	BB0_117;

	mov.u64 	%rd305, image_RNM1;
	cvta.global.u64 	%rd294, %rd305;
	mov.u32 	%r224, 8;
	// inline asm
	call (%rd293), _rt_buffer_get_64, (%rd294, %r31, %r224, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs193, %rs194, %rs195, %rs196}, [%rd293];
	// inline asm
	{  cvt.f32.f16 %f953, %rs193;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f954, %rs194;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f955, %rs195;}

	// inline asm
	// inline asm
	call (%rd299), _rt_buffer_get_64, (%rd294, %r31, %r224, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	add.f32 	%f956, %f953, 0f00000000;
	add.f32 	%f957, %f954, 0f00000000;
	add.f32 	%f958, %f955, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs192, %f958;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs191, %f957;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs190, %f956;}

	// inline asm
	mov.u16 	%rs197, 0;
	st.v4.u16 	[%rd299], {%rs190, %rs191, %rs192, %rs197};
	bra.uni 	BB0_118;

BB0_117:
	mov.u64 	%rd312, image_RNM1;
	cvta.global.u64 	%rd307, %rd312;
	mov.u32 	%r226, 8;
	// inline asm
	call (%rd306), _rt_buffer_get_64, (%rd307, %r31, %r226, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	mov.f32 	%f959, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs198, %f959;}

	// inline asm
	mov.u16 	%rs199, 0;
	st.v4.u16 	[%rd306], {%rs198, %rs198, %rs198, %rs199};

BB0_118:
	ld.global.u32 	%r227, [additive];
	setp.eq.s32	%p126, %r227, 0;
	@%p126 bra 	BB0_120;

	mov.u64 	%rd325, image_RNM2;
	cvta.global.u64 	%rd314, %rd325;
	mov.u32 	%r231, 8;
	// inline asm
	call (%rd313), _rt_buffer_get_64, (%rd314, %r31, %r231, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs206, %rs207, %rs208, %rs209}, [%rd313];
	// inline asm
	{  cvt.f32.f16 %f960, %rs206;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f961, %rs207;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f962, %rs208;}

	// inline asm
	// inline asm
	call (%rd319), _rt_buffer_get_64, (%rd314, %r31, %r231, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	add.f32 	%f963, %f960, 0f00000000;
	add.f32 	%f964, %f961, 0f00000000;
	add.f32 	%f965, %f962, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs205, %f965;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs204, %f964;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs203, %f963;}

	// inline asm
	mov.u16 	%rs210, 0;
	st.v4.u16 	[%rd319], {%rs203, %rs204, %rs205, %rs210};
	bra.uni 	BB0_121;

BB0_120:
	mov.u64 	%rd332, image_RNM2;
	cvta.global.u64 	%rd327, %rd332;
	mov.u32 	%r233, 8;
	// inline asm
	call (%rd326), _rt_buffer_get_64, (%rd327, %r31, %r233, %rd12, %rd13, %rd19, %rd19);
	// inline asm
	mov.f32 	%f966, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs211, %f966;}

	// inline asm
	mov.u16 	%rs212, 0;
	st.v4.u16 	[%rd326], {%rs211, %rs211, %rs211, %rs212};
	bra.uni 	BB0_121;

BB0_94:
	mov.u64 	%rd178, image_HDR;
	cvta.global.u64 	%rd173, %rd178;
	mov.u32 	%r176, 8;
	// inline asm
	call (%rd172), _rt_buffer_get_64, (%rd173, %r31, %r176, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	mov.f32 	%f911, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs121, %f911;}

	// inline asm
	st.v4.u16 	[%rd172], {%rs121, %rs121, %rs121, %rs110};

BB0_95:
	ld.global.u32 	%r177, [additive];
	setp.eq.s32	%p117, %r177, 0;
	mov.f32 	%f912, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs122, %f912;}

	// inline asm
	@%p117 bra 	BB0_97;

	mov.u64 	%rd191, image_RNM0;
	cvta.global.u64 	%rd180, %rd191;
	mov.u32 	%r181, 8;
	// inline asm
	call (%rd179), _rt_buffer_get_64, (%rd180, %r31, %r181, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs129, %rs130, %rs131, %rs132}, [%rd179];
	// inline asm
	{  cvt.f32.f16 %f913, %rs129;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f914, %rs130;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f915, %rs131;}

	// inline asm
	// inline asm
	call (%rd185), _rt_buffer_get_64, (%rd180, %r31, %r181, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	add.f32 	%f916, %f913, 0f00000000;
	add.f32 	%f917, %f914, 0f00000000;
	add.f32 	%f918, %f915, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs128, %f918;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs127, %f917;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs126, %f916;}

	// inline asm
	st.v4.u16 	[%rd185], {%rs126, %rs127, %rs128, %rs122};
	bra.uni 	BB0_98;

BB0_97:
	mov.u64 	%rd198, image_RNM0;
	cvta.global.u64 	%rd193, %rd198;
	mov.u32 	%r183, 8;
	// inline asm
	call (%rd192), _rt_buffer_get_64, (%rd193, %r31, %r183, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	mov.f32 	%f919, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs133, %f919;}

	// inline asm
	st.v4.u16 	[%rd192], {%rs133, %rs133, %rs133, %rs122};

BB0_98:
	ld.global.u32 	%r184, [additive];
	setp.eq.s32	%p118, %r184, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs134, %f912;}

	// inline asm
	@%p118 bra 	BB0_100;

	mov.u64 	%rd211, image_RNM1;
	cvta.global.u64 	%rd200, %rd211;
	mov.u32 	%r188, 8;
	// inline asm
	call (%rd199), _rt_buffer_get_64, (%rd200, %r31, %r188, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs141, %rs142, %rs143, %rs144}, [%rd199];
	// inline asm
	{  cvt.f32.f16 %f921, %rs141;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f922, %rs142;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f923, %rs143;}

	// inline asm
	// inline asm
	call (%rd205), _rt_buffer_get_64, (%rd200, %r31, %r188, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	add.f32 	%f924, %f921, 0f00000000;
	add.f32 	%f925, %f922, 0f00000000;
	add.f32 	%f926, %f923, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs140, %f926;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs139, %f925;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs138, %f924;}

	// inline asm
	st.v4.u16 	[%rd205], {%rs138, %rs139, %rs140, %rs134};
	bra.uni 	BB0_101;

BB0_100:
	mov.u64 	%rd218, image_RNM1;
	cvta.global.u64 	%rd213, %rd218;
	mov.u32 	%r190, 8;
	// inline asm
	call (%rd212), _rt_buffer_get_64, (%rd213, %r31, %r190, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	mov.f32 	%f927, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs145, %f927;}

	// inline asm
	st.v4.u16 	[%rd212], {%rs145, %rs145, %rs145, %rs134};

BB0_101:
	ld.global.u32 	%r191, [additive];
	setp.eq.s32	%p119, %r191, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs146, %f912;}

	// inline asm
	@%p119 bra 	BB0_103;

	mov.u64 	%rd231, image_RNM2;
	cvta.global.u64 	%rd220, %rd231;
	mov.u32 	%r195, 8;
	// inline asm
	call (%rd219), _rt_buffer_get_64, (%rd220, %r31, %r195, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs153, %rs154, %rs155, %rs156}, [%rd219];
	// inline asm
	{  cvt.f32.f16 %f929, %rs153;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f930, %rs154;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f931, %rs155;}

	// inline asm
	// inline asm
	call (%rd225), _rt_buffer_get_64, (%rd220, %r31, %r195, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	add.f32 	%f932, %f929, 0f00000000;
	add.f32 	%f933, %f930, 0f00000000;
	add.f32 	%f934, %f931, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs152, %f934;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs151, %f933;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs150, %f932;}

	// inline asm
	st.v4.u16 	[%rd225], {%rs150, %rs151, %rs152, %rs146};
	bra.uni 	BB0_121;

BB0_103:
	mov.u64 	%rd238, image_RNM2;
	cvta.global.u64 	%rd233, %rd238;
	mov.u32 	%r197, 8;
	// inline asm
	call (%rd232), _rt_buffer_get_64, (%rd233, %r31, %r197, %rd10, %rd11, %rd19, %rd19);
	// inline asm
	mov.f32 	%f935, 0f00000000;
	// inline asm
	{  cvt.rn.f16.f32 %rs157, %f935;}

	// inline asm
	st.v4.u16 	[%rd232], {%rs157, %rs157, %rs157, %rs146};
	bra.uni 	BB0_121;

BB0_24:
	setp.geu.f32	%p43, %f1042, 0f00000000;
	@%p43 bra 	BB0_27;

	mov.f32 	%f1013, 0f3EE8BA2E;
	cvt.rzi.f32.f32	%f454, %f1013;
	setp.neu.f32	%p44, %f454, 0f3EE8BA2E;
	selp.f32	%f1045, 0f7FFFFFFF, %f1045, %p44;

BB0_27:
	abs.f32 	%f1010, %f1042;
	add.f32 	%f456, %f1010, 0f3EE8BA2E;
	mov.b32 	 %r80, %f456;
	setp.lt.s32	%p46, %r80, 2139095040;
	@%p46 bra 	BB0_32;

	abs.f32 	%f1011, %f1042;
	setp.gtu.f32	%p47, %f1011, 0f7F800000;
	@%p47 bra 	BB0_31;
	bra.uni 	BB0_29;

BB0_31:
	add.f32 	%f1045, %f1042, 0f3EE8BA2E;
	bra.uni 	BB0_32;

BB0_29:
	abs.f32 	%f1012, %f1042;
	setp.neu.f32	%p48, %f1012, 0f7F800000;
	@%p48 bra 	BB0_32;

	selp.f32	%f1045, 0fFF800000, 0f7F800000, %p2;

BB0_32:
	mul.f32 	%f457, %f1045, 0f437F0000;
	setp.eq.f32	%p49, %f1042, 0f3F800000;
	selp.f32	%f458, 0f437F0000, %f457, %p49;
	cvt.rzi.u32.f32	%r81, %f458;
	cvt.u16.u32	%rs17, %r81;
	mov.u16 	%rs18, 255;
	st.v2.u8 	[%rd30], {%rs17, %rs18};
	ld.global.u32 	%r241, [imageEnabled];

BB0_33:
	and.b32  	%r82, %r241, 1;
	setp.eq.b32	%p50, %r82, 1;
	@!%p50 bra 	BB0_68;
	bra.uni 	BB0_34;

BB0_34:
	mov.f32 	%f988, 0fB5BFBE8E;
	mov.f32 	%f987, 0fBF317200;
	mov.f32 	%f986, 0f35BFBE8E;
	mov.f32 	%f985, 0f3F317200;
	mov.f32 	%f984, 0f3DAAAABD;
	mov.f32 	%f983, 0f3C4CAF63;
	mov.f32 	%f982, 0f3B18F0FE;
	abs.f32 	%f59, %f42;
	setp.lt.f32	%p51, %f59, 0f00800000;
	mul.f32 	%f464, %f59, 0f4B800000;
	selp.f32	%f465, 0fC3170000, 0fC2FE0000, %p51;
	selp.f32	%f466, %f464, %f59, %p51;
	mov.b32 	 %r83, %f466;
	and.b32  	%r84, %r83, 8388607;
	or.b32  	%r85, %r84, 1065353216;
	mov.b32 	 %f467, %r85;
	shr.u32 	%r86, %r83, 23;
	cvt.rn.f32.u32	%f468, %r86;
	add.f32 	%f469, %f465, %f468;
	setp.gt.f32	%p52, %f467, 0f3FB504F3;
	mul.f32 	%f470, %f467, 0f3F000000;
	add.f32 	%f471, %f469, 0f3F800000;
	selp.f32	%f472, %f470, %f467, %p52;
	selp.f32	%f473, %f471, %f469, %p52;
	add.f32 	%f474, %f472, 0fBF800000;
	add.f32 	%f460, %f472, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f459,%f460;
	// inline asm
	add.f32 	%f475, %f474, %f474;
	mul.f32 	%f476, %f459, %f475;
	mul.f32 	%f477, %f476, %f476;
	fma.rn.f32 	%f480, %f982, %f477, %f983;
	fma.rn.f32 	%f482, %f480, %f477, %f984;
	mul.rn.f32 	%f483, %f482, %f477;
	mul.rn.f32 	%f484, %f483, %f476;
	sub.f32 	%f485, %f474, %f476;
	neg.f32 	%f486, %f476;
	add.f32 	%f487, %f485, %f485;
	fma.rn.f32 	%f488, %f486, %f474, %f487;
	mul.rn.f32 	%f489, %f459, %f488;
	add.f32 	%f490, %f484, %f476;
	sub.f32 	%f491, %f476, %f490;
	add.f32 	%f492, %f484, %f491;
	add.f32 	%f493, %f489, %f492;
	add.f32 	%f494, %f490, %f493;
	sub.f32 	%f495, %f490, %f494;
	add.f32 	%f496, %f493, %f495;
	mul.rn.f32 	%f498, %f473, %f985;
	mul.rn.f32 	%f500, %f473, %f986;
	add.f32 	%f501, %f498, %f494;
	sub.f32 	%f502, %f498, %f501;
	add.f32 	%f503, %f494, %f502;
	add.f32 	%f504, %f496, %f503;
	add.f32 	%f505, %f500, %f504;
	add.f32 	%f506, %f501, %f505;
	sub.f32 	%f507, %f501, %f506;
	add.f32 	%f508, %f505, %f507;
	mov.f32 	%f509, 0f3EE66666;
	mul.rn.f32 	%f510, %f509, %f506;
	neg.f32 	%f511, %f510;
	fma.rn.f32 	%f512, %f509, %f506, %f511;
	fma.rn.f32 	%f513, %f509, %f508, %f512;
	mov.f32 	%f514, 0f00000000;
	fma.rn.f32 	%f515, %f514, %f506, %f513;
	add.rn.f32 	%f516, %f510, %f515;
	neg.f32 	%f517, %f516;
	add.rn.f32 	%f518, %f510, %f517;
	add.rn.f32 	%f519, %f518, %f515;
	mov.b32 	 %r87, %f516;
	setp.eq.s32	%p53, %r87, 1118925336;
	add.s32 	%r88, %r87, -1;
	mov.b32 	 %f520, %r88;
	add.f32 	%f521, %f519, 0f37000000;
	selp.f32	%f522, %f520, %f516, %p53;
	selp.f32	%f60, %f521, %f519, %p53;
	mul.f32 	%f523, %f522, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f524, %f523;
	fma.rn.f32 	%f526, %f524, %f987, %f522;
	fma.rn.f32 	%f528, %f524, %f988, %f526;
	mul.f32 	%f529, %f528, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f530, %f529;
	add.f32 	%f531, %f524, 0f00000000;
	ex2.approx.f32 	%f532, %f531;
	mul.f32 	%f533, %f530, %f532;
	setp.lt.f32	%p54, %f522, 0fC2D20000;
	selp.f32	%f534, 0f00000000, %f533, %p54;
	setp.gt.f32	%p55, %f522, 0f42D20000;
	selp.f32	%f1046, 0f7F800000, %f534, %p55;
	setp.eq.f32	%p56, %f1046, 0f7F800000;
	@%p56 bra 	BB0_36;

	fma.rn.f32 	%f1046, %f1046, %f60, %f1046;

BB0_36:
	mov.f32 	%f1017, 0f3E666666;
	cvt.rzi.f32.f32	%f1016, %f1017;
	fma.rn.f32 	%f1015, %f1016, 0fC0000000, 0f3EE66666;
	abs.f32 	%f1014, %f1015;
	setp.lt.f32	%p57, %f42, 0f00000000;
	setp.eq.f32	%p58, %f1014, 0f3F800000;
	and.pred  	%p3, %p57, %p58;
	mov.b32 	 %r89, %f1046;
	xor.b32  	%r90, %r89, -2147483648;
	mov.b32 	 %f535, %r90;
	selp.f32	%f1048, %f535, %f1046, %p3;
	setp.eq.f32	%p59, %f42, 0f00000000;
	@%p59 bra 	BB0_39;
	bra.uni 	BB0_37;

BB0_39:
	add.f32 	%f538, %f42, %f42;
	selp.f32	%f1048, %f538, 0f00000000, %p58;
	bra.uni 	BB0_40;

BB0_37:
	setp.geu.f32	%p60, %f42, 0f00000000;
	@%p60 bra 	BB0_40;

	mov.f32 	%f1027, 0f3EE66666;
	cvt.rzi.f32.f32	%f537, %f1027;
	setp.neu.f32	%p61, %f537, 0f3EE66666;
	selp.f32	%f1048, 0f7FFFFFFF, %f1048, %p61;

BB0_40:
	abs.f32 	%f1018, %f42;
	add.f32 	%f539, %f1018, 0f3EE66666;
	mov.b32 	 %r91, %f539;
	setp.lt.s32	%p63, %r91, 2139095040;
	@%p63 bra 	BB0_45;

	abs.f32 	%f1025, %f42;
	setp.gtu.f32	%p64, %f1025, 0f7F800000;
	@%p64 bra 	BB0_44;
	bra.uni 	BB0_42;

BB0_44:
	add.f32 	%f1048, %f42, 0f3EE66666;
	bra.uni 	BB0_45;

BB0_42:
	abs.f32 	%f1026, %f42;
	setp.neu.f32	%p65, %f1026, 0f7F800000;
	@%p65 bra 	BB0_45;

	selp.f32	%f1048, 0fFF800000, 0f7F800000, %p3;

BB0_45:
	mov.f32 	%f1020, 0f00000000;
	mov.f32 	%f1019, 0f3EE66666;
	mov.f32 	%f995, 0fB5BFBE8E;
	mov.f32 	%f994, 0fBF317200;
	mov.f32 	%f993, 0f35BFBE8E;
	mov.f32 	%f992, 0f3F317200;
	mov.f32 	%f991, 0f3DAAAABD;
	mov.f32 	%f990, 0f3C4CAF63;
	mov.f32 	%f989, 0f3B18F0FE;
	setp.eq.f32	%p66, %f42, 0f3F800000;
	selp.f32	%f71, 0f3F800000, %f1048, %p66;
	abs.f32 	%f72, %f43;
	setp.lt.f32	%p67, %f72, 0f00800000;
	mul.f32 	%f542, %f72, 0f4B800000;
	selp.f32	%f543, 0fC3170000, 0fC2FE0000, %p67;
	selp.f32	%f544, %f542, %f72, %p67;
	mov.b32 	 %r92, %f544;
	and.b32  	%r93, %r92, 8388607;
	or.b32  	%r94, %r93, 1065353216;
	mov.b32 	 %f545, %r94;
	shr.u32 	%r95, %r92, 23;
	cvt.rn.f32.u32	%f546, %r95;
	add.f32 	%f547, %f543, %f546;
	setp.gt.f32	%p68, %f545, 0f3FB504F3;
	mul.f32 	%f548, %f545, 0f3F000000;
	add.f32 	%f549, %f547, 0f3F800000;
	selp.f32	%f550, %f548, %f545, %p68;
	selp.f32	%f551, %f549, %f547, %p68;
	add.f32 	%f552, %f550, 0fBF800000;
	add.f32 	%f541, %f550, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f540,%f541;
	// inline asm
	add.f32 	%f553, %f552, %f552;
	mul.f32 	%f554, %f540, %f553;
	mul.f32 	%f555, %f554, %f554;
	fma.rn.f32 	%f558, %f989, %f555, %f990;
	fma.rn.f32 	%f560, %f558, %f555, %f991;
	mul.rn.f32 	%f561, %f560, %f555;
	mul.rn.f32 	%f562, %f561, %f554;
	sub.f32 	%f563, %f552, %f554;
	neg.f32 	%f564, %f554;
	add.f32 	%f565, %f563, %f563;
	fma.rn.f32 	%f566, %f564, %f552, %f565;
	mul.rn.f32 	%f567, %f540, %f566;
	add.f32 	%f568, %f562, %f554;
	sub.f32 	%f569, %f554, %f568;
	add.f32 	%f570, %f562, %f569;
	add.f32 	%f571, %f567, %f570;
	add.f32 	%f572, %f568, %f571;
	sub.f32 	%f573, %f568, %f572;
	add.f32 	%f574, %f571, %f573;
	mul.rn.f32 	%f576, %f551, %f992;
	mul.rn.f32 	%f578, %f551, %f993;
	add.f32 	%f579, %f576, %f572;
	sub.f32 	%f580, %f576, %f579;
	add.f32 	%f581, %f572, %f580;
	add.f32 	%f582, %f574, %f581;
	add.f32 	%f583, %f578, %f582;
	add.f32 	%f584, %f579, %f583;
	sub.f32 	%f585, %f579, %f584;
	add.f32 	%f586, %f583, %f585;
	mul.rn.f32 	%f588, %f1019, %f584;
	neg.f32 	%f589, %f588;
	fma.rn.f32 	%f590, %f1019, %f584, %f589;
	fma.rn.f32 	%f591, %f1019, %f586, %f590;
	fma.rn.f32 	%f593, %f1020, %f584, %f591;
	add.rn.f32 	%f594, %f588, %f593;
	neg.f32 	%f595, %f594;
	add.rn.f32 	%f596, %f588, %f595;
	add.rn.f32 	%f597, %f596, %f593;
	mov.b32 	 %r96, %f594;
	setp.eq.s32	%p69, %r96, 1118925336;
	add.s32 	%r97, %r96, -1;
	mov.b32 	 %f598, %r97;
	add.f32 	%f599, %f597, 0f37000000;
	selp.f32	%f600, %f598, %f594, %p69;
	selp.f32	%f73, %f599, %f597, %p69;
	mul.f32 	%f601, %f600, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f602, %f601;
	fma.rn.f32 	%f604, %f602, %f994, %f600;
	fma.rn.f32 	%f606, %f602, %f995, %f604;
	mul.f32 	%f607, %f606, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f608, %f607;
	add.f32 	%f609, %f602, 0f00000000;
	ex2.approx.f32 	%f610, %f609;
	mul.f32 	%f611, %f608, %f610;
	setp.lt.f32	%p70, %f600, 0fC2D20000;
	selp.f32	%f612, 0f00000000, %f611, %p70;
	setp.gt.f32	%p71, %f600, 0f42D20000;
	selp.f32	%f1049, 0f7F800000, %f612, %p71;
	setp.eq.f32	%p72, %f1049, 0f7F800000;
	@%p72 bra 	BB0_47;

	fma.rn.f32 	%f1049, %f1049, %f73, %f1049;

BB0_47:
	setp.lt.f32	%p73, %f43, 0f00000000;
	and.pred  	%p4, %p73, %p58;
	mov.b32 	 %r98, %f1049;
	xor.b32  	%r99, %r98, -2147483648;
	mov.b32 	 %f613, %r99;
	selp.f32	%f1051, %f613, %f1049, %p4;
	setp.eq.f32	%p75, %f43, 0f00000000;
	@%p75 bra 	BB0_50;
	bra.uni 	BB0_48;

BB0_50:
	add.f32 	%f616, %f43, %f43;
	selp.f32	%f1051, %f616, 0f00000000, %p58;
	bra.uni 	BB0_51;

BB0_48:
	setp.geu.f32	%p76, %f43, 0f00000000;
	@%p76 bra 	BB0_51;

	mov.f32 	%f1024, 0f3EE66666;
	cvt.rzi.f32.f32	%f615, %f1024;
	setp.neu.f32	%p77, %f615, 0f3EE66666;
	selp.f32	%f1051, 0f7FFFFFFF, %f1051, %p77;

BB0_51:
	abs.f32 	%f1028, %f43;
	add.f32 	%f617, %f1028, 0f3EE66666;
	mov.b32 	 %r100, %f617;
	setp.lt.s32	%p79, %r100, 2139095040;
	@%p79 bra 	BB0_56;

	abs.f32 	%f1029, %f43;
	setp.gtu.f32	%p80, %f1029, 0f7F800000;
	@%p80 bra 	BB0_55;
	bra.uni 	BB0_53;

BB0_55:
	add.f32 	%f1051, %f43, 0f3EE66666;
	bra.uni 	BB0_56;

BB0_53:
	abs.f32 	%f1030, %f43;
	setp.neu.f32	%p81, %f1030, 0f7F800000;
	@%p81 bra 	BB0_56;

	selp.f32	%f1051, 0fFF800000, 0f7F800000, %p4;

BB0_56:
	mov.f32 	%f1022, 0f00000000;
	mov.f32 	%f1021, 0f3EE66666;
	mov.f32 	%f1002, 0fB5BFBE8E;
	mov.f32 	%f1001, 0fBF317200;
	mov.f32 	%f1000, 0f35BFBE8E;
	mov.f32 	%f999, 0f3F317200;
	mov.f32 	%f998, 0f3DAAAABD;
	mov.f32 	%f997, 0f3C4CAF63;
	mov.f32 	%f996, 0f3B18F0FE;
	setp.eq.f32	%p82, %f43, 0f3F800000;
	selp.f32	%f84, 0f3F800000, %f1051, %p82;
	abs.f32 	%f85, %f44;
	setp.lt.f32	%p83, %f85, 0f00800000;
	mul.f32 	%f620, %f85, 0f4B800000;
	selp.f32	%f621, 0fC3170000, 0fC2FE0000, %p83;
	selp.f32	%f622, %f620, %f85, %p83;
	mov.b32 	 %r101, %f622;
	and.b32  	%r102, %r101, 8388607;
	or.b32  	%r103, %r102, 1065353216;
	mov.b32 	 %f623, %r103;
	shr.u32 	%r104, %r101, 23;
	cvt.rn.f32.u32	%f624, %r104;
	add.f32 	%f625, %f621, %f624;
	setp.gt.f32	%p84, %f623, 0f3FB504F3;
	mul.f32 	%f626, %f623, 0f3F000000;
	add.f32 	%f627, %f625, 0f3F800000;
	selp.f32	%f628, %f626, %f623, %p84;
	selp.f32	%f629, %f627, %f625, %p84;
	add.f32 	%f630, %f628, 0fBF800000;
	add.f32 	%f619, %f628, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f618,%f619;
	// inline asm
	add.f32 	%f631, %f630, %f630;
	mul.f32 	%f632, %f618, %f631;
	mul.f32 	%f633, %f632, %f632;
	fma.rn.f32 	%f636, %f996, %f633, %f997;
	fma.rn.f32 	%f638, %f636, %f633, %f998;
	mul.rn.f32 	%f639, %f638, %f633;
	mul.rn.f32 	%f640, %f639, %f632;
	sub.f32 	%f641, %f630, %f632;
	neg.f32 	%f642, %f632;
	add.f32 	%f643, %f641, %f641;
	fma.rn.f32 	%f644, %f642, %f630, %f643;
	mul.rn.f32 	%f645, %f618, %f644;
	add.f32 	%f646, %f640, %f632;
	sub.f32 	%f647, %f632, %f646;
	add.f32 	%f648, %f640, %f647;
	add.f32 	%f649, %f645, %f648;
	add.f32 	%f650, %f646, %f649;
	sub.f32 	%f651, %f646, %f650;
	add.f32 	%f652, %f649, %f651;
	mul.rn.f32 	%f654, %f629, %f999;
	mul.rn.f32 	%f656, %f629, %f1000;
	add.f32 	%f657, %f654, %f650;
	sub.f32 	%f658, %f654, %f657;
	add.f32 	%f659, %f650, %f658;
	add.f32 	%f660, %f652, %f659;
	add.f32 	%f661, %f656, %f660;
	add.f32 	%f662, %f657, %f661;
	sub.f32 	%f663, %f657, %f662;
	add.f32 	%f664, %f661, %f663;
	mul.rn.f32 	%f666, %f1021, %f662;
	neg.f32 	%f667, %f666;
	fma.rn.f32 	%f668, %f1021, %f662, %f667;
	fma.rn.f32 	%f669, %f1021, %f664, %f668;
	fma.rn.f32 	%f671, %f1022, %f662, %f669;
	add.rn.f32 	%f672, %f666, %f671;
	neg.f32 	%f673, %f672;
	add.rn.f32 	%f674, %f666, %f673;
	add.rn.f32 	%f675, %f674, %f671;
	mov.b32 	 %r105, %f672;
	setp.eq.s32	%p85, %r105, 1118925336;
	add.s32 	%r106, %r105, -1;
	mov.b32 	 %f676, %r106;
	add.f32 	%f677, %f675, 0f37000000;
	selp.f32	%f678, %f676, %f672, %p85;
	selp.f32	%f86, %f677, %f675, %p85;
	mul.f32 	%f679, %f678, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f680, %f679;
	fma.rn.f32 	%f682, %f680, %f1001, %f678;
	fma.rn.f32 	%f684, %f680, %f1002, %f682;
	mul.f32 	%f685, %f684, 0f3FB8AA3B;
	ex2.approx.ftz.f32 	%f686, %f685;
	add.f32 	%f687, %f680, 0f00000000;
	ex2.approx.f32 	%f688, %f687;
	mul.f32 	%f689, %f686, %f688;
	setp.lt.f32	%p86, %f678, 0fC2D20000;
	selp.f32	%f690, 0f00000000, %f689, %p86;
	setp.gt.f32	%p87, %f678, 0f42D20000;
	selp.f32	%f1052, 0f7F800000, %f690, %p87;
	setp.eq.f32	%p88, %f1052, 0f7F800000;
	@%p88 bra 	BB0_58;

	fma.rn.f32 	%f1052, %f1052, %f86, %f1052;

BB0_58:
	setp.lt.f32	%p89, %f44, 0f00000000;
	and.pred  	%p5, %p89, %p58;
	mov.b32 	 %r107, %f1052;
	xor.b32  	%r108, %r107, -2147483648;
	mov.b32 	 %f691, %r108;
	selp.f32	%f1054, %f691, %f1052, %p5;
	setp.eq.f32	%p91, %f44, 0f00000000;
	@%p91 bra 	BB0_61;
	bra.uni 	BB0_59;

BB0_61:
	add.f32 	%f694, %f44, %f44;
	selp.f32	%f1054, %f694, 0f00000000, %p58;
	bra.uni 	BB0_62;

BB0_59:
	setp.geu.f32	%p92, %f44, 0f00000000;
	@%p92 bra 	BB0_62;

	mov.f32 	%f1023, 0f3EE66666;
	cvt.rzi.f32.f32	%f693, %f1023;
	setp.neu.f32	%p93, %f693, 0f3EE66666;
	selp.f32	%f1054, 0f7FFFFFFF, %f1054, %p93;

BB0_62:
	abs.f32 	%f1031, %f44;
	add.f32 	%f695, %f1031, 0f3EE66666;
	mov.b32 	 %r109, %f695;
	setp.lt.s32	%p95, %r109, 2139095040;
	@%p95 bra 	BB0_67;

	abs.f32 	%f1032, %f44;
	setp.gtu.f32	%p96, %f1032, 0f7F800000;
	@%p96 bra 	BB0_66;
	bra.uni 	BB0_64;

BB0_66:
	add.f32 	%f1054, %f44, 0f3EE66666;
	bra.uni 	BB0_67;

BB0_64:
	abs.f32 	%f1033, %f44;
	setp.neu.f32	%p97, %f1033, 0f7F800000;
	@%p97 bra 	BB0_67;

	selp.f32	%f1054, 0fFF800000, 0f7F800000, %p5;

BB0_67:
	mov.u32 	%r234, 4;
	setp.eq.f32	%p98, %f44, 0f3F800000;
	selp.f32	%f696, 0f3F800000, %f1054, %p98;
	cvt.u64.u32	%rd40, %r3;
	cvt.u64.u32	%rd39, %r2;
	mov.u64 	%rd43, image;
	cvta.global.u64 	%rd38, %rd43;
	// inline asm
	call (%rd37), _rt_buffer_get_64, (%rd38, %r31, %r234, %rd39, %rd40, %rd19, %rd19);
	// inline asm
	cvt.sat.f32.f32	%f697, %f696;
	mul.f32 	%f698, %f697, 0f437FFD71;
	cvt.rzi.u32.f32	%r112, %f698;
	cvt.sat.f32.f32	%f699, %f84;
	mul.f32 	%f700, %f699, 0f437FFD71;
	cvt.rzi.u32.f32	%r113, %f700;
	cvt.sat.f32.f32	%f701, %f71;
	mul.f32 	%f702, %f701, 0f437FFD71;
	cvt.rzi.u32.f32	%r114, %f702;
	cvt.u16.u32	%rs19, %r112;
	cvt.u16.u32	%rs20, %r114;
	cvt.u16.u32	%rs21, %r113;
	mov.u16 	%rs22, 255;
	st.v4.u8 	[%rd37], {%rs19, %rs21, %rs20, %rs22};
	ld.global.u32 	%r241, [imageEnabled];

BB0_68:
	and.b32  	%r115, %r241, 4;
	setp.eq.s32	%p99, %r115, 0;
	@%p99 bra 	BB0_72;

	ld.global.u32 	%r116, [additive];
	setp.eq.s32	%p100, %r116, 0;
	cvt.u64.u32	%rd3, %r2;
	cvt.u64.u32	%rd4, %r3;
	mov.f32 	%f703, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs23, %f703;}

	// inline asm
	@%p100 bra 	BB0_71;

	mov.u64 	%rd56, image_HDR;
	cvta.global.u64 	%rd45, %rd56;
	mov.u32 	%r120, 8;
	// inline asm
	call (%rd44), _rt_buffer_get_64, (%rd45, %r31, %r120, %rd3, %rd4, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs30, %rs31, %rs32, %rs33}, [%rd44];
	// inline asm
	{  cvt.f32.f16 %f704, %rs30;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f705, %rs31;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f706, %rs32;}

	// inline asm
	// inline asm
	call (%rd50), _rt_buffer_get_64, (%rd45, %r31, %r120, %rd3, %rd4, %rd19, %rd19);
	// inline asm
	add.f32 	%f707, %f42, %f704;
	add.f32 	%f708, %f43, %f705;
	add.f32 	%f709, %f44, %f706;
	// inline asm
	{  cvt.rn.f16.f32 %rs29, %f709;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs28, %f708;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs27, %f707;}

	// inline asm
	st.v4.u16 	[%rd50], {%rs27, %rs28, %rs29, %rs23};
	bra.uni 	BB0_72;

BB0_71:
	mov.u64 	%rd63, image_HDR;
	cvta.global.u64 	%rd58, %rd63;
	mov.u32 	%r122, 8;
	// inline asm
	call (%rd57), _rt_buffer_get_64, (%rd58, %r31, %r122, %rd3, %rd4, %rd19, %rd19);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs36, %f44;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs35, %f43;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs34, %f42;}

	// inline asm
	st.v4.u16 	[%rd57], {%rs34, %rs35, %rs36, %rs23};

BB0_72:
	mov.u32 	%r235, 4;
	mul.f32 	%f716, %f28, %f1042;
	ld.global.f32 	%f717, [lightColor];
	mul.f32 	%f718, %f716, %f717;
	ld.global.f32 	%f719, [lightColor+4];
	mul.f32 	%f720, %f716, %f719;
	ld.global.f32 	%f721, [lightColor+8];
	mul.f32 	%f722, %f716, %f721;
	mul.f32 	%f97, %f248, %f718;
	mul.f32 	%f98, %f249, %f720;
	mul.f32 	%f99, %f250, %f722;
	ld.global.v2.u32 	{%r125, %r126}, [pixelID];
	cvt.u64.u32	%rd66, %r125;
	cvt.u64.u32	%rd67, %r126;
	mov.u64 	%rd70, uvtangent;
	cvta.global.u64 	%rd65, %rd70;
	// inline asm
	call (%rd64), _rt_buffer_get_64, (%rd65, %r31, %r235, %rd66, %rd67, %rd19, %rd19);
	// inline asm
	ld.u32 	%r15, [%rd64];
	shr.u32 	%r16, %r15, 16;
	cvt.u16.u32	%rs37, %r16;
	and.b16  	%rs38, %rs37, 255;
	cvt.u16.u32	%rs39, %r15;
	or.b16  	%rs40, %rs39, %rs38;
	setp.eq.s16	%p101, %rs40, 0;
	mov.f32 	%f1061, 0f00000000;
	mov.f32 	%f1055, %f1061;
	mov.f32 	%f1056, %f1061;
	mov.f32 	%f1057, %f1061;
	@%p101 bra 	BB0_74;

	ld.u8 	%rs41, [%rd64+1];
	and.b16  	%rs43, %rs39, 255;
	cvt.rn.f32.u16	%f723, %rs43;
	div.rn.f32 	%f724, %f723, 0f437F0000;
	fma.rn.f32 	%f725, %f724, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f726, %rs41;
	div.rn.f32 	%f727, %f726, 0f437F0000;
	fma.rn.f32 	%f728, %f727, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f729, %rs38;
	div.rn.f32 	%f730, %f729, 0f437F0000;
	fma.rn.f32 	%f731, %f730, 0f40000000, 0fBF800000;
	mul.f32 	%f732, %f728, %f728;
	fma.rn.f32 	%f733, %f725, %f725, %f732;
	fma.rn.f32 	%f734, %f731, %f731, %f733;
	sqrt.rn.f32 	%f735, %f734;
	rcp.rn.f32 	%f736, %f735;
	mul.f32 	%f1055, %f725, %f736;
	mul.f32 	%f1056, %f728, %f736;
	mul.f32 	%f1057, %f731, %f736;

BB0_74:
	mov.u32 	%r236, 4;
	mul.f32 	%f740, %f1036, %f1056;
	mul.f32 	%f741, %f1035, %f1057;
	sub.f32 	%f742, %f741, %f740;
	mul.f32 	%f743, %f1034, %f1057;
	mul.f32 	%f744, %f1036, %f1055;
	sub.f32 	%f745, %f744, %f743;
	mul.f32 	%f746, %f1035, %f1055;
	mul.f32 	%f747, %f1034, %f1056;
	sub.f32 	%f748, %f747, %f746;
	setp.lt.u32	%p102, %r15, 16777216;
	selp.f32	%f749, 0fBF800000, 0f3F800000, %p102;
	mul.f32 	%f750, %f742, %f749;
	mul.f32 	%f751, %f745, %f749;
	mul.f32 	%f752, %f748, %f749;
	mul.f32 	%f753, %f750, 0f00000000;
	mul.f32 	%f754, %f751, 0f00000000;
	mul.f32 	%f755, %f752, 0f00000000;
	fma.rn.f32 	%f756, %f1055, 0f3F5105EC, %f753;
	fma.rn.f32 	%f757, %f1056, 0f3F5105EC, %f754;
	fma.rn.f32 	%f758, %f1057, 0f3F5105EC, %f755;
	mul.f32 	%f106, %f1034, 0f3F13CD3A;
	add.f32 	%f107, %f106, %f756;
	mul.f32 	%f108, %f1035, 0f3F13CD3A;
	add.f32 	%f109, %f108, %f757;
	mul.f32 	%f110, %f1036, 0f3F13CD3A;
	add.f32 	%f111, %f110, %f758;
	ld.global.v2.u32 	{%r131, %r132}, [pixelID];
	cvt.u64.u32	%rd73, %r131;
	cvt.u64.u32	%rd74, %r132;
	// inline asm
	call (%rd71), _rt_buffer_get_64, (%rd65, %r31, %r236, %rd73, %rd74, %rd19, %rd19);
	// inline asm
	ld.u32 	%r17, [%rd71];
	shr.u32 	%r18, %r17, 16;
	cvt.u16.u32	%rs46, %r18;
	and.b16  	%rs47, %rs46, 255;
	cvt.u16.u32	%rs48, %r17;
	or.b16  	%rs49, %rs48, %rs47;
	setp.eq.s16	%p103, %rs49, 0;
	mov.f32 	%f1058, %f1061;
	mov.f32 	%f1059, %f1061;
	mov.f32 	%f1060, %f1061;
	@%p103 bra 	BB0_76;

	ld.u8 	%rs50, [%rd71+1];
	and.b16  	%rs52, %rs48, 255;
	cvt.rn.f32.u16	%f759, %rs52;
	div.rn.f32 	%f760, %f759, 0f437F0000;
	fma.rn.f32 	%f761, %f760, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f762, %rs50;
	div.rn.f32 	%f763, %f762, 0f437F0000;
	fma.rn.f32 	%f764, %f763, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f765, %rs47;
	div.rn.f32 	%f766, %f765, 0f437F0000;
	fma.rn.f32 	%f767, %f766, 0f40000000, 0fBF800000;
	mul.f32 	%f768, %f764, %f764;
	fma.rn.f32 	%f769, %f761, %f761, %f768;
	fma.rn.f32 	%f770, %f767, %f767, %f769;
	sqrt.rn.f32 	%f771, %f770;
	rcp.rn.f32 	%f772, %f771;
	mul.f32 	%f1058, %f761, %f772;
	mul.f32 	%f1059, %f764, %f772;
	mul.f32 	%f1060, %f767, %f772;

BB0_76:
	mov.u32 	%r237, 4;
	mul.f32 	%f776, %f1036, %f1059;
	mul.f32 	%f777, %f1035, %f1060;
	sub.f32 	%f778, %f777, %f776;
	mul.f32 	%f779, %f1034, %f1060;
	mul.f32 	%f780, %f1036, %f1058;
	sub.f32 	%f781, %f780, %f779;
	mul.f32 	%f782, %f1035, %f1058;
	mul.f32 	%f783, %f1034, %f1059;
	sub.f32 	%f784, %f783, %f782;
	setp.lt.u32	%p104, %r17, 16777216;
	selp.f32	%f785, 0fBF800000, 0f3F800000, %p104;
	mul.f32 	%f786, %f778, %f785;
	mul.f32 	%f787, %f781, %f785;
	mul.f32 	%f788, %f784, %f785;
	mul.f32 	%f789, %f786, 0f3F3504F3;
	mul.f32 	%f790, %f787, 0f3F3504F3;
	mul.f32 	%f791, %f788, 0f3F3504F3;
	fma.rn.f32 	%f792, %f1058, 0fBED105EC, %f789;
	fma.rn.f32 	%f793, %f1059, 0fBED105EC, %f790;
	fma.rn.f32 	%f794, %f1060, 0fBED105EC, %f791;
	add.f32 	%f118, %f106, %f792;
	add.f32 	%f119, %f108, %f793;
	add.f32 	%f120, %f110, %f794;
	ld.global.v2.u32 	{%r137, %r138}, [pixelID];
	cvt.u64.u32	%rd80, %r137;
	cvt.u64.u32	%rd81, %r138;
	// inline asm
	call (%rd78), _rt_buffer_get_64, (%rd65, %r31, %r237, %rd80, %rd81, %rd19, %rd19);
	// inline asm
	ld.u32 	%r19, [%rd78];
	shr.u32 	%r20, %r19, 16;
	cvt.u16.u32	%rs55, %r20;
	and.b16  	%rs56, %rs55, 255;
	cvt.u16.u32	%rs57, %r19;
	or.b16  	%rs58, %rs57, %rs56;
	setp.eq.s16	%p105, %rs58, 0;
	mov.f32 	%f1062, %f1061;
	mov.f32 	%f1063, %f1061;
	@%p105 bra 	BB0_78;

	ld.u8 	%rs59, [%rd78+1];
	and.b16  	%rs61, %rs57, 255;
	cvt.rn.f32.u16	%f795, %rs61;
	div.rn.f32 	%f796, %f795, 0f437F0000;
	fma.rn.f32 	%f797, %f796, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f798, %rs59;
	div.rn.f32 	%f799, %f798, 0f437F0000;
	fma.rn.f32 	%f800, %f799, 0f40000000, 0fBF800000;
	cvt.rn.f32.u16	%f801, %rs56;
	div.rn.f32 	%f802, %f801, 0f437F0000;
	fma.rn.f32 	%f803, %f802, 0f40000000, 0fBF800000;
	mul.f32 	%f804, %f800, %f800;
	fma.rn.f32 	%f805, %f797, %f797, %f804;
	fma.rn.f32 	%f806, %f803, %f803, %f805;
	sqrt.rn.f32 	%f807, %f806;
	rcp.rn.f32 	%f808, %f807;
	mul.f32 	%f1061, %f797, %f808;
	mul.f32 	%f1062, %f800, %f808;
	mul.f32 	%f1063, %f803, %f808;

BB0_78:
	mul.f32 	%f810, %f1036, %f1062;
	mul.f32 	%f811, %f1035, %f1063;
	sub.f32 	%f812, %f811, %f810;
	mul.f32 	%f813, %f1034, %f1063;
	mul.f32 	%f814, %f1036, %f1061;
	sub.f32 	%f815, %f814, %f813;
	mul.f32 	%f816, %f1035, %f1061;
	mul.f32 	%f817, %f1034, %f1062;
	sub.f32 	%f818, %f817, %f816;
	setp.lt.u32	%p106, %r19, 16777216;
	selp.f32	%f819, 0fBF800000, 0f3F800000, %p106;
	mul.f32 	%f820, %f812, %f819;
	mul.f32 	%f821, %f815, %f819;
	mul.f32 	%f822, %f818, %f819;
	mul.f32 	%f823, %f820, 0fBF3504F3;
	mul.f32 	%f824, %f821, 0fBF3504F3;
	mul.f32 	%f825, %f822, 0fBF3504F3;
	fma.rn.f32 	%f826, %f1061, 0fBED105EC, %f823;
	fma.rn.f32 	%f827, %f1062, 0fBED105EC, %f824;
	fma.rn.f32 	%f828, %f1063, 0fBED105EC, %f825;
	add.f32 	%f829, %f106, %f826;
	add.f32 	%f830, %f108, %f827;
	add.f32 	%f831, %f110, %f828;
	mul.f32 	%f832, %f109, %f11;
	fma.rn.f32 	%f833, %f107, %f10, %f832;
	fma.rn.f32 	%f834, %f111, %f12, %f833;
	cvt.sat.f32.f32	%f835, %f834;
	mul.f32 	%f836, %f97, %f835;
	mul.f32 	%f837, %f98, %f835;
	mul.f32 	%f838, %f99, %f835;
	mul.f32 	%f839, %f119, %f11;
	fma.rn.f32 	%f840, %f118, %f10, %f839;
	fma.rn.f32 	%f841, %f120, %f12, %f840;
	cvt.sat.f32.f32	%f842, %f841;
	mul.f32 	%f843, %f97, %f842;
	mul.f32 	%f844, %f98, %f842;
	mul.f32 	%f845, %f99, %f842;
	mul.f32 	%f846, %f830, %f11;
	fma.rn.f32 	%f847, %f829, %f10, %f846;
	fma.rn.f32 	%f848, %f831, %f12, %f847;
	cvt.sat.f32.f32	%f849, %f848;
	mul.f32 	%f850, %f97, %f849;
	mul.f32 	%f851, %f98, %f849;
	mul.f32 	%f852, %f99, %f849;
	cvt.sat.f32.f32	%f853, %f29;
	mul.f32 	%f854, %f97, %f853;
	mul.f32 	%f855, %f98, %f853;
	mul.f32 	%f856, %f99, %f853;
	add.f32 	%f857, %f836, %f843;
	add.f32 	%f858, %f837, %f844;
	add.f32 	%f859, %f838, %f845;
	add.f32 	%f860, %f857, %f850;
	add.f32 	%f861, %f858, %f851;
	add.f32 	%f862, %f859, %f852;
	mul.f32 	%f863, %f860, 0f3F13CD3A;
	mul.f32 	%f864, %f861, 0f3F13CD3A;
	mul.f32 	%f865, %f862, 0f3F13CD3A;
	div.rn.f32 	%f866, %f854, %f863;
	div.rn.f32 	%f867, %f855, %f864;
	div.rn.f32 	%f868, %f856, %f865;
	setp.eq.f32	%p107, %f854, 0f00000000;
	selp.f32	%f869, 0f00000000, %f866, %p107;
	setp.eq.f32	%p108, %f855, 0f00000000;
	selp.f32	%f870, 0f00000000, %f867, %p108;
	setp.eq.f32	%p109, %f856, 0f00000000;
	selp.f32	%f871, 0f00000000, %f868, %p109;
	mul.f32 	%f127, %f836, %f869;
	mul.f32 	%f128, %f837, %f870;
	mul.f32 	%f129, %f838, %f871;
	mul.f32 	%f130, %f843, %f869;
	mul.f32 	%f131, %f844, %f870;
	mul.f32 	%f132, %f845, %f871;
	mul.f32 	%f133, %f850, %f869;
	mul.f32 	%f134, %f851, %f870;
	mul.f32 	%f135, %f852, %f871;
	ld.global.u32 	%r141, [additive];
	setp.eq.s32	%p110, %r141, 0;
	cvt.u64.u32	%rd8, %r2;
	cvt.u64.u32	%rd9, %r3;
	mov.f32 	%f809, 0f3F800000;
	// inline asm
	{  cvt.rn.f16.f32 %rs64, %f809;}

	// inline asm
	@%p110 bra 	BB0_80;

	mov.u64 	%rd97, image_RNM0;
	cvta.global.u64 	%rd86, %rd97;
	mov.u32 	%r145, 8;
	// inline asm
	call (%rd85), _rt_buffer_get_64, (%rd86, %r31, %r145, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs71, %rs72, %rs73, %rs74}, [%rd85];
	// inline asm
	{  cvt.f32.f16 %f872, %rs71;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f873, %rs72;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f874, %rs73;}

	// inline asm
	// inline asm
	call (%rd91), _rt_buffer_get_64, (%rd86, %r31, %r145, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	add.f32 	%f875, %f127, %f872;
	add.f32 	%f876, %f128, %f873;
	add.f32 	%f877, %f129, %f874;
	// inline asm
	{  cvt.rn.f16.f32 %rs70, %f877;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs69, %f876;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs68, %f875;}

	// inline asm
	st.v4.u16 	[%rd91], {%rs68, %rs69, %rs70, %rs64};
	bra.uni 	BB0_81;

BB0_80:
	mov.u64 	%rd104, image_RNM0;
	cvta.global.u64 	%rd99, %rd104;
	mov.u32 	%r147, 8;
	// inline asm
	call (%rd98), _rt_buffer_get_64, (%rd99, %r31, %r147, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs77, %f129;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs76, %f128;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs75, %f127;}

	// inline asm
	st.v4.u16 	[%rd98], {%rs75, %rs76, %rs77, %rs64};

BB0_81:
	ld.global.u32 	%r148, [additive];
	setp.eq.s32	%p111, %r148, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs78, %f809;}

	// inline asm
	@%p111 bra 	BB0_83;

	mov.u64 	%rd117, image_RNM1;
	cvta.global.u64 	%rd106, %rd117;
	mov.u32 	%r152, 8;
	// inline asm
	call (%rd105), _rt_buffer_get_64, (%rd106, %r31, %r152, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs85, %rs86, %rs87, %rs88}, [%rd105];
	// inline asm
	{  cvt.f32.f16 %f882, %rs85;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f883, %rs86;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f884, %rs87;}

	// inline asm
	// inline asm
	call (%rd111), _rt_buffer_get_64, (%rd106, %r31, %r152, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	add.f32 	%f885, %f130, %f882;
	add.f32 	%f886, %f131, %f883;
	add.f32 	%f887, %f132, %f884;
	// inline asm
	{  cvt.rn.f16.f32 %rs84, %f887;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs83, %f886;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs82, %f885;}

	// inline asm
	st.v4.u16 	[%rd111], {%rs82, %rs83, %rs84, %rs78};
	bra.uni 	BB0_84;

BB0_83:
	mov.u64 	%rd124, image_RNM1;
	cvta.global.u64 	%rd119, %rd124;
	mov.u32 	%r154, 8;
	// inline asm
	call (%rd118), _rt_buffer_get_64, (%rd119, %r31, %r154, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs91, %f132;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs90, %f131;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs89, %f130;}

	// inline asm
	st.v4.u16 	[%rd118], {%rs89, %rs90, %rs91, %rs78};

BB0_84:
	ld.global.u32 	%r155, [additive];
	setp.eq.s32	%p112, %r155, 0;
	// inline asm
	{  cvt.rn.f16.f32 %rs92, %f809;}

	// inline asm
	@%p112 bra 	BB0_86;

	mov.u64 	%rd137, image_RNM2;
	cvta.global.u64 	%rd126, %rd137;
	mov.u32 	%r159, 8;
	// inline asm
	call (%rd125), _rt_buffer_get_64, (%rd126, %r31, %r159, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	ld.v4.u16 	{%rs99, %rs100, %rs101, %rs102}, [%rd125];
	// inline asm
	{  cvt.f32.f16 %f892, %rs99;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f893, %rs100;}

	// inline asm
	// inline asm
	{  cvt.f32.f16 %f894, %rs101;}

	// inline asm
	// inline asm
	call (%rd131), _rt_buffer_get_64, (%rd126, %r31, %r159, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	add.f32 	%f895, %f133, %f892;
	add.f32 	%f896, %f134, %f893;
	add.f32 	%f897, %f135, %f894;
	// inline asm
	{  cvt.rn.f16.f32 %rs98, %f897;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs97, %f896;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs96, %f895;}

	// inline asm
	st.v4.u16 	[%rd131], {%rs96, %rs97, %rs98, %rs92};
	bra.uni 	BB0_121;

BB0_86:
	mov.u64 	%rd144, image_RNM2;
	cvta.global.u64 	%rd139, %rd144;
	mov.u32 	%r161, 8;
	// inline asm
	call (%rd138), _rt_buffer_get_64, (%rd139, %r31, %r161, %rd8, %rd9, %rd19, %rd19);
	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs105, %f135;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs104, %f134;}

	// inline asm
	// inline asm
	{  cvt.rn.f16.f32 %rs103, %f133;}

	// inline asm
	st.v4.u16 	[%rd138], {%rs103, %rs104, %rs105, %rs92};

BB0_121:
	ret;
}


